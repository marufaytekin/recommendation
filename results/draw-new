 f = figure();
 bar(numberOfRatings * 10, numberOfUsers);
 xlabel('Number of Ratings');
 ylabel('Number of Users');
 title('Amazon 1M Data Set');
 write(f, 'amazon-1m-histo');


function write (f, file_name)
  H = 3.2; W = 4;
  h = f;
  set (h,'papertype', '<custom>')
  set (h,'paperunits','inches');
  set (h,'papersize',[H W])
  set (h,'paperposition', [0,0,[W H]])
  set (h,'defaultaxesposition', [0.15, 0.15, 0.75, 0.75])
  set (0,'defaultaxesfontsize', 10)
  out_file_name = strcat (file_name,'.eps');
  print('-depsc', out_file_name);
endfunction

write (f, 'ml-mae-k');


# ========================================================
# Model build time
# Test case: 8
# ========================================================

# Running time

x = UBnumOfUsersList/1000;
x2 = IBnumOfItemsList/1000;
y1 = UBmodelBuildTimeList/1000;
y2 = IBmodelBuildTimeList/1000;
y3 = UBLSHmodelBuildTimeList/1000;
y4 = IBLSHmodelBuildTimeList/1000;

f= figure();
plot (x, y1, '-dk', x, y3, '--*k');
legend('UB','UB-LSH', 'location', 'northwest');
xlabel('users(x1000)')
ylabel('Model Build Time (sec)');
write(f, strcat(fileName,'-model-build-time-ub'));

f= figure();
plot (x2, y2, '-dk', x2, y4, '--*k' );
legend('IB', 'IB-LSH', 'location', 'northwest');
xlabel('items(x1000)')
ylabel('Model Build Time(sec)');
write(f, strcat(fileName,'-model-build-time-ib'));


# ========================================================
# Hash Tables against to MAE and Runtime
# test case: 5000
# ========================================================
x = 1:10;
n = 10;
f= figure();
y1 = UBMaeList;
y2 = IBMaeList;
y3 = UBLSHHashTablesMaeList;
y4 = IBLSHHashTablesMaeList;
y5 = LSHFreqHashTablesMaeList;
y6 = LSHHashTablesMaeList;
plot ([1,n], [y1, y1],'-.k', [1,n], [y2, y2],'--k', x,y3,'-dk', x,y4,'-xk', x,y5,'-ok', x,y6,'-^k');
h = legend('UB', 'IB', 'UB-LSH', 'IB-LSH', 'LSH1', 'LSH2', 'location', 'east');
xlabel('Number of Hash Tables');
ylabel('MAE');
legend boxon;
write(f, strcat(fileName,'-hash-tables-mae'));

f= figure();
y1 = UBRuntime/testdatasize;
y2 = IBRuntime/testdatasize;
y3 = UBLSHHashTablesRuntimeList/testdatasize;
y4 = IBLSHHashTablesRuntimeList/testdatasize;
y5 = LSHFreqHashTablesRuntimeList/testdatasize;
y6 = LSHHashTablesRuntimeList/testdatasize;
plot ([1,n], [y1, y1],'-.k', [1,n], [y2, y2],'--k', x,y3,'-dk', x,y4,'-xk', x,y5,'-ok', x,y6,'-^k');
h = legend('UB', 'IB', 'UB-LSH', 'IB-LSH', 'LSH1', 'LSH2', 'location', 'northwest');
xlabel('Number of Hash Tables');
ylabel('Run Time(ms/prediction)');
legend boxon;
write(f, strcat(fileName,'-hash-tables-runtime'));

f= figure();
y1 = numOfUsers/1000;
y2 = numOfItems/1000;
y3 = UBLSHHashTablesCandidateSetList/1000;
y4 = IBLSHHashTablesCandidateSetList/1000;
y5 = LSHFreqHashTablesCandidateSetList/1000;
y6 = LSHHashTablesCandidateSetList/1000;

plot(x,y3,'-dk', x,y4,'-xk', x,y5,'-ok', x,y6,'-^k');
xlabel('Number of Hash Tables');
ylabel('Candidate set size (K)');
legend('UB-LSH', 'IB-LSH', 'LSH1', 'LSH2', 'location', 'northwest');
legend boxon;
write(f, strcat(fileName,'-hash-tables-candidate-set'));


# ========================================================
# Hash Functions against to MAE and Runtime
# test case: 5000
# ========================================================

x = 4:10;
n = 10;

f = figure();
y1 = UBMaeList;
y2 = IBMaeList;
y3 = UBLSHHashFunctionsMaeList(4:10);
y4 = IBLSHHashFunctionsMaeList(4:10);
y5 = LSHFreqHashFunctionsMaeList
y6 = LSHHashFunctionsMaeList(4:10);
plot ([4,n], [y1, y1],'-.k', [4,n], [y2, y2],'--k', x,y3,'-dk', x,y4,'-xk', x,y5,'-ok', x,y6,'-^k');
h = legend('UB', 'IB', 'UB-LSH', 'IB-LSH', 'LSH1', 'LSH2', 'location', 'northwest');
set (h, 'fontsize', 20);
xlabel('Number of Hash Functions');
ylabel('MAE');
legend boxon;
write(f, strcat(fileName,'-hash-functions-mae'));

f= figure();
y1 = UBRuntime/testdatasize;
y2 = IBRuntime/testdatasize;
y3 = UBLSHHashFunctionsRuntimeList(4:10)/testdatasize;
y4 = IBLSHHashFunctionsRuntimeList(4:10)/testdatasize;
y5 = LSHFreqHashFunctionsRuntimeList/testdatasize;
y6 = LSHHashFunctionsRuntimeList(4:10)/testdatasize;
plot ([4,n], [y1, y1],'-.k', [4,n], [y2, y2],'--k', x, y3,'-dk', x, y4,'-xk', x, y5,'-ok', x, y6,'-^k');
legend('UB', 'IB', 'UB-LSH', 'IB-LSH', 'LSH1', 'LSH2', 'location', 'northeast');
xlabel('Number of Hash Functions');
ylabel('Run Time(ms/prediction)');
legend boxon;
write(f, strcat(fileName,'-hash-functions-runtime'));

f = figure();
x = 4:10
y3 = UBLSHHashFunctionsCandidateSetList(4:10);
y4 = IBLSHHashFunctionsCandidateSetList(4:10);
y5 = LSHFreqHashFunctionsCandidateSetList;
y6 = LSHHashFunctionsCandidateSetList(4:10);
plot(x, y3,'-dk', x, y4,'-xk', x, y5,'-ok', x, y6,'-^k');
legend('UB-LSH', 'IB-LSH', 'LSH1', 'LSH2', 'location', 'northeast');
legend boxon;
xlabel('Number of Hash Functions');
ylabel('Avg. Candidate Set Size');
write(f, strcat(fileName,'-hash-functions-candidate-set'));

f = figure();
x = 4:10;
total_test_data = max (UBLSHHashFunctionsPredictedItemsList);
y3 = UBLSHHashFunctionsPredictedItemsList(4:10)/total_test_data;
y4 = IBLSHHashFunctionsPredictedItemsList(4:10)/total_test_data;
y5 = LSHFreqHashFunctionsPredictedItemsList/total_test_data;
y6 = LSHHashFunctionsPredictedItemsList(4:10)/total_test_data;
plot (x,y3,'-dk', x,y4,'-xk', x,y5,'-ok', x,y6,'-^k');
h = legend( 'UB-LSH', 'IB-LSH', 'LSH1', 'LSH2', 'location', 'west');
legend boxon;
xlabel('Number of Hash Functions');
ylabel('Prediction Ratio');
write(f, strcat(fileName,'-hash-functions-prediction-ratio'));


# =================================================
# Throughput
# =================================================
f = figure();
y1 = 1000 * testdatasize / UBRuntime;
y2 = 1000 * testdatasize / IBRuntime;
y3 = 1000 * UBLSHHashFunctionsPredictedItemsList(4:10) ./ UBLSHHashFunctionsRuntimeList(4:10);
y4 = 1000 * IBLSHHashFunctionsPredictedItemsList(4:10) ./ IBLSHHashFunctionsRuntimeList(4:10);
y5 = 1000 * LSHFreqHashFunctionsPredictedItemsList ./ LSHFreqHashFunctionsRuntimeList;
y6 = 1000 * LSHHashFunctionsPredictedItemsList(4:10) ./ LSHHashFunctionsRuntimeList(4:10);

x = 4:10;
plot ([4,n], [y1, y1],'-.k', [4,n], [y2, y2],'--k', x,y3,'-dk', x,y4,'-xk', x,y5,'-ok', x,y6,'-^k');
h = legend('UB', 'IB', 'UB-LSH', 'IB-LSH', 'LSH1', 'LSH2', 'location', 'northwest');
legend boxon;
xlabel('Number of Hash Functions');
ylabel('Throughput (predictions/sec.)');
write(f, strcat(fileName,'-hash-functions-throughput'));


f = figure();
x = 1:10
y1 = 1000 * testdatasize / UBRuntime;
y2 = 1000 * testdatasize / IBRuntime;
y3 = 1000 * UBLSHHashTablesPredictedItemsList ./ UBLSHHashTablesRuntimeList;
y4 = 1000 * IBLSHHashTablesPredictedItemsList ./ IBLSHHashTablesRuntimeList;
y5 = 1000 * LSHFreqHashTablesPredictedItemsList ./ LSHFreqHashTablesRuntimeList;
y6 = 1000 * LSHHashTablesPredictedItemsList ./ LSHHashTablesRuntimeList;


plot ([1,n], [y1, y1],'-.k', [1,n], [y2, y2],'--k', x,y3,'-dk', x,y4,'-xk', x,y5,'-ok', x,y6,'-^k');
h = legend('UB', 'IB', 'UB-LSH', 'IB-LSH', 'LSH1', 'LSH2', 'location', 'northeast');
legend boxon;
xlabel('Number of Hash Tables');
ylabel('Throughput (predictions/sec.)');
write(f, strcat(fileName,'-hash-tables-throughput'));

# ========================================================
# Number of Hash Functions on the metrics
# ========================================================

max_x = n = 10;
x = 1:max_x;
numOfHashTables = 10;

y1 = mean(UBPrecisionList);
y2 = mean(IBPrecisionList);
y3 = UBLSHHashFunctionsPrecisionList;
y4 = IBLSHHashFunctionsPrecisionList;
y5 = LSHFreqHashFunctionsPrecisionList;
y6 = LSHHashFunctionsPrecisionList;
f= figure();
plot ([1,n], [y1, y1],'-.k', [1,n], [y2, y2],'--k', x,y3,'-dk', x,y4,'-xk', x,y5,'-ok', x,y6,'-^k');
h = legend('UB', 'IB', 'UB-LSH', 'IB-LSH', 'LSH1', 'LSH2', 'location', 'northeast');
legend boxon;
xlabel('Number of Hash Functions');
ylabel('Precision');
write(f, strcat(fileName,'-hash-functions-precision'));

y1 = mean(UBRecallList);
y2 = mean(IBRecallList);
y3 = UBLSHHashFunctionsRecallList;
y4 = IBLSHHashFunctionsRecallList;
y5 = LSHFreqHashFunctionsRecallList;
y6 = LSHHashFunctionsRecallList;
f= figure();
plot ([1,n], [y1, y1],'-.k', [1,n], [y2, y2],'--k', x,y3,'-dk', x,y4,'-xk', x,y5,'-ok', x,y6,'-^k');
h = legend('UB', 'IB', 'UB-LSH', 'IB-LSH', 'LSH1', 'LSH2', 'location', 'northeast');
legend boxon;
xlabel('Number of Hash Functions');
ylabel('Recall')
write(f, strcat(fileName,'-hash-functions-recall'));


# ========================================================
# Number of Hash Tables on the metrics
# ========================================================
n= 10;
x = 1:1:n;
numOfHashFunctions = 6;

y1 = mean(UBPrecisionList);
y2 = mean(IBPrecisionList);
y3 = UBLSHHashTablesPrecisionList;
y4 = IBLSHHashTablesPrecisionList;
y5 = LSHFreqHashTablesPrecisionList;
y6 = LSHHashTablesPrecisionList;
f= figure();
plot ([1,n], [y1, y1],'-.k', [1,n], [y2, y2],'--k', x,y3,'-dk', x,y4,'-xk', x,y5,'-ok', x,y6,'-^k');
h = legend('UB', 'IB', 'UB-LSH', 'IB-LSH', 'LSH1', 'LSH2', 'location', 'northwest');
legend boxon;
xlabel('Number of Hash Tables');
ylabel('Precision');
write(f, strcat(fileName,'-hash-tables-precision'));

y1 = mean(UBRecallList);
y2 = mean(IBRecallList);
y3 = UBLSHHashTablesRecallList;
y4 = IBLSHHashTablesRecallList;
y5 = LSHFreqHashTablesRecallList;
y6 = LSHHashTablesRecallList;
f= figure();
plot ([1,n], [y1, y1],'-.k', [1,n], [y2, y2],'--k', x,y3,'-dk', x,y4,'-xk', x,y5,'-ok', x,y6,'-^k');
h = legend('UB', 'IB', 'UB-LSH', 'IB-LSH', 'LSH1', 'LSH2', 'location', 'northwest');
legend boxon;
xlabel('Number of Hash Tables');
ylabel('Recall')
write(f, strcat(fileName,'-hash-tables-recall'));


# ========================================================
# test case: LSH 2D
# test case:
# ========================================================
dataFileBase = data/1m/ml-1m
x = 1:10;
y = 1:10;

f= figure();

# Heatmaps
data = LSHMae2D;
contourf(x, y, data);
axis square;
colorbar;
xlabel("Hash Functions");
ylabel("Hash Tables");
title("MAE");
write(f, strcat(fileName,'-lsh-heat-map-mae'));

f= figure();
data = LSHRuntime2D / testdatasize;
contourf(x, y, data);
axis square;
colorbar;
xlabel("Hash Functions");
ylabel("Hash Tables");
title("Running Time (ms/prediction)");
write(f, strcat(fileName,'-lsh-heat-map-runtime'));

f= figure();
data = LSHCandidate_Set_List2D;
contourf(x, y, data);
axis square;
colorbar;
xlabel("Hash Functions");
ylabel("Hash Tables");
title("Candidate Set Size");
write(f, strcat(fileName,'-lsh-heat-map-candidate'));
