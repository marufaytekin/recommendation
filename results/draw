 f = figure();
 bar(numberOfRatings * 10, numberOfUsers);
 xlabel("Number of Ratings");
 ylabel("Number of Users");
 title("Amazon 1M Data Set");
 write(f, "amazon-1m-histo");


function write (f, file_name)
  H = 3.2; W = 4;
  h = f;
  set (h,'papertype', '<custom>')
  set (h,'paperunits','inches');
  set (h,'papersize',[H W])
  set (h,'paperposition', [0,0,[W H]])
  set (h,'defaultaxesposition', [0.15, 0.15, 0.75, 0.75])
  set (0,'defaultaxesfontsize', 10)
  out_file_name = strcat (file_name,'.eps');
  print('-depsc',  out_file_name);
endfunction

write (f, "ml-mae-k");

# ========================================================
# test case: UB k and y 2D
# test case: 51
# ========================================================
k = 1:3:30
y = 1:3:30
# Heatmaps
f= figure();
data = UBMaeKAndYList2D;
contourf(k, y, data);
axis square;
colorbar;
xlabel("y");
ylabel("k");
title("MAE");
write (f, strcat (fileName,'-51-ub-mae-k-y-heat-map'));

#Significance and k
# k = 20
mae =  UBMaeKAndYList2D (7,:)
f = figure();
plot (y, mae);
legend("k=20");
xlabel("y");
ylabel("MAE");
write(f, strcat (fileName,'-51-ub-mae-y'));

mae =  UBMaeKAndYList2D (:,2);
# y = 10
f = figure();
plot (k, mae);
legend("y=5");
xlabel("k");
ylabel("MAE")
write(f, strcat (fileName,'-51-ub-mae-k'));


# ========================================================
# Heat Maps for MAE and Runtime - Hash Functions & y
# test case : 55
# ========================================================

n = 30;

x = 1:10;
y = 1:3:n;

f= figure();
# Heatmaps
data = UBLSHyHashFunctionsMae2D;
contourf(x, y, data);
axis square;
colorbar;
xlabel("Hash Functions");
ylabel("y");
title("MAE");
write(f, strcat(fileName,'-55-mae-hash-functions-y-heat-map'));



# ========================================================
# test case: UBLSHHashTables Prediction Performance
# test case: 56
# ========================================================
x = 1:10
# Heatmaps
f= figure();
mae =  UBLSHHashTablesMaeList;
f = figure();
plot (x, mae);
xlabel("Hash Tables");
ylabel("MAE");
write(f, strcat (fileName,'-56-ublsh-mae-hash-tables'));

f= figure();
runtime =  UBLSHHashTablesRuntimeList / 1000;
plot (x, runtime);
xlabel("Hash Tables");
ylabel("Runtime (sec)");
write(f, strcat (fileName,'-56-ublsh-runtime-hash-tables'));


# ========================================================
# test case: UBLSHHashFunctions Prediction Performance
# test case: 57
# ========================================================
x = 1:10
# Heatmaps
f= figure();
mae =  UBLSHHashFunctionsMaeList;
plot (x, mae);
xlabel("Hash Functions");
ylabel("MAE");
write(f, strcat (fileName,'-57-ublsh-mae-hash-functions'));

f= figure();
runtime =  UBLSHHashFunctionsRuntimeList / 1000;
plot (x, runtime);
xlabel("Hash Functions");
ylabel("Runtime (sec)");
write(f, strcat (fileName,'-57-ublsh-runtime-hash-functions'));

f= figure();
ratio = PredictedItemsList/8357 .* 100;
plot (x, ratio);
xlabel("Hash Functions");
ylabel("Predicted Items %");
write(f, strcat (fileName,'-57-ublsh-predicted-hash-functions'));


f= figure();
plot (x, UBLSHCandidateSetList);
xlabel("Hash Functions");
ylabel("Cadidate Set Size");
write(f, strcat (fileName,'-57-ublsh-candidate-hash-functions'));


# ========================================================
# test case: UBLSH 2D
# test case: 59
# ========================================================
dataFileBase = data/100k/ml
k = 20
UBLSHMae2D = [[0.8036935028643516, 0.819511830984006, 0.8433752200730323, 0.8588730558556303, 0.9031202970411095, 0.9111224634343714, 0.9354159770894293, 0.9348123895632384, 0.9735505917017581, 0.9878730962484221]; [0.8011886611673913, 0.8068698262488295, 0.8148674654566186, 0.8343608885024336, 0.8454402354128464, 0.873913128671672, 0.9038425689110491, 0.911907617977119, 0.9373053529000316, 0.9643673470165189]; [0.7989444496538368, 0.8013852252976648, 0.8090482909274271, 0.8151925965887951, 0.8303722884676562, 0.8498547965465407, 0.875268304379701, 0.8996069697707272, 0.9355564978522924, 0.9531427353040088]; [0.7985665201862732, 0.798636126906542, 0.80210310275418, 0.8100498686891479, 0.8229871976491351, 0.8362751170875834, 0.8486147316944442, 0.8851467455892285, 0.9223334314210594, 0.9217396822926457]; [0.7981891493412072, 0.8004163753417887, 0.8004128726643615, 0.8052946333336714, 0.8162946991442125, 0.8311171702681243, 0.8485033488790243, 0.8739408267903478, 0.8997895203866918, 0.9264359364104316]; [0.7983690500781897, 0.7993908054733111, 0.802685806321326, 0.8015064049759069, 0.8143199514500822, 0.8235719534925633, 0.846373912490863, 0.8537501093249418, 0.8923698439930706, 0.9298853221693787]; [0.798406362903246, 0.7988129206284876, 0.8007650040638818, 0.8029815674803196, 0.8095405327280444, 0.8178224230836962, 0.8298101538307053, 0.8516720104840156, 0.8836698578280634, 0.9080589076316631]; [0.7982195347166988, 0.7988164186669292, 0.8000525640745071, 0.8009182105160191, 0.8070329208928487, 0.8121613098687472, 0.8316744164994939, 0.8553750212229261, 0.8753251354589779, 0.8812456691241458]; [0.7982864704537986, 0.7983131875381887, 0.7994769732536985, 0.8019392680432134, 0.8043792094495611, 0.8161304520758971, 0.8274426691174134, 0.8387497584119489, 0.8685187491573215, 0.889589230708372]; [0.7982874369413038, 0.7982846352036631, 0.7987917411173208, 0.8012394664984389, 0.8027596509667837, 0.8096278691387594, 0.8219343668819352, 0.837300084577545, 0.8639771521268275, 0.885111506665193]];
UBLSHRuntime2D = [[9249.666666666666, 4404.333333333333, 2800.6666666666665, 2071.0, 859.3333333333334, 867.3333333333334, 610.0, 523.3333333333334, 379.0, 284.6666666666667]; [11199.0, 7595.333333333333, 5255.333333333333, 2415.3333333333335, 1999.0, 1481.3333333333333, 937.3333333333334, 926.0, 601.0, 406.6666666666667]; [12789.666666666666, 9759.333333333334, 6882.0, 4397.333333333333, 2868.0, 2077.6666666666665, 1335.3333333333333, 1099.3333333333333, 627.0, 534.0]; [13722.666666666666, 11883.666666666666, 7887.666666666667, 6009.666666666667, 3821.0, 2698.6666666666665, 2220.6666666666665, 1196.0, 770.3333333333334, 711.3333333333334]; [13842.0, 11778.333333333334, 9674.333333333334, 6619.666666666667, 3871.0, 2813.3333333333335, 2504.0, 1290.3333333333333, 1147.6666666666667, 718.6666666666666]; [14074.333333333334, 12676.0, 9600.0, 7951.0, 4859.0, 3881.0, 2005.3333333333333, 1853.6666666666667, 1164.3333333333333, 847.3333333333334]; [14158.0, 13062.0, 10832.666666666666, 8591.0, 5660.333333333333, 3772.6666666666665, 2848.6666666666665, 2130.3333333333335, 1387.3333333333333, 1022.0]; [13796.666666666666, 13378.666666666666, 11902.0, 9030.666666666666, 6253.333333333333, 4517.666666666667, 2746.3333333333335, 2106.0, 1657.0, 1416.0]; [13933.0, 13447.666666666666, 12335.333333333334, 10029.0, 6816.333333333333, 4551.0, 3395.0, 2492.6666666666665, 1887.3333333333333, 1289.6666666666667]; [14122.666666666666, 13878.666666666666, 12693.666666666666, 10131.666666666666, 7183.333333333333, 5332.0, 3527.6666666666665, 2497.3333333333335, 1894.6666666666667, 1298.3333333333333]];
UBLSHCandidate_Set_List2D = [[534.2616645710345, 261.4457973808238, 153.85489786544926, 93.55456044260683, 35.986678982409785, 25.55836890242983, 12.366484897662758, 9.84127857730162, 5.190040531279481, 1.9439259537269598]; [741.4894807730434, 461.86771450644454, 283.88852668205664, 136.61057892091722, 82.89739402894968, 49.22836075081057, 25.798155872771673, 18.650933480383, 10.318869599552242, 4.36984851222394]; [855.3332554714116, 596.8327128181348, 381.33995540928134, 235.6611323312985, 134.14622130745906, 80.5467820856169, 45.08911125443865, 24.716037867162125, 12.938069976839268, 7.3499289619682715]; [902.6477699029483, 728.9383914083431, 473.7511134486381, 296.872521364075, 168.8773869291314, 106.94310519138641, 62.079789062312194, 30.9676106252105, 16.633842748147707, 10.849047903622546]; [924.3769571672947, 744.4066113479225, 558.2840454120841, 344.8687647403997, 186.62622637777315, 118.73400993776387, 73.32536750245536, 38.67652235754548, 23.108200990144734, 12.918424464576644]; [931.3053718457926, 820.6049449143193, 588.0918087319601, 439.2114994255698, 237.92108861962956, 153.80224262474903, 74.71567351709415, 52.02544300250994, 23.613005941480143, 11.998996087937888]; [938.2399114880276, 866.0893552063567, 656.9675188807217, 460.9682756367822, 281.0963764464902, 169.7822749486205, 95.47122158424882, 60.43060373527856, 29.52880717172759, 18.15865719024773]; [940.7111676171431, 887.6851533992408, 719.2203060295014, 492.5881548274327, 311.18299248454474, 185.83542907320114, 104.75436154925741, 62.30393484395478, 35.09930129008573, 23.372671708289385]; [941.1041573236668, 897.018727184233, 754.6664629677306, 549.0896420606838, 352.43442253432903, 210.71091635237568, 123.9333208196371, 72.7846840478558, 40.22691038875237, 22.533578068232526]; [941.4665463525231, 916.1644619448793, 771.3018877630763, 558.6212734677847, 359.15695210624284, 228.21208599902312, 133.323283221898, 76.23852964489149, 45.290282265648706, 22.608957126928576]];

x = 1:10;
y = 1:10;

f= figure();

# Heatmaps
data = UBLSHMae2D;
contourf(x, y, data);
axis square;
colorbar;
xlabel("Hash Functions");
ylabel("Hash Tables");
title("MAE");
write(f, strcat(fileName,'-59-mae-ublsh-heat-map'));

f= figure();
data = UBLSHRuntime2D / 1000;
contourf(x, y, data);
axis square;
colorbar;
xlabel("Hash Functions");
ylabel("Hash Tables");
title("Running Time (sec)");
write(f, strcat(fileName,'-59-runtime-ublsh-heat-map'));

f= figure();
data = UBLSHCandidate_Set_List2D;
contourf(x, y, data);
axis square;
colorbar;
xlabel("Hash Functions");
ylabel("Hash Tables");
title("Candidate Set Size");
write(f, strcat(fileName,'-59-candidate-ublsh-heat-map'));


# ========================================================
# Number of Hash Functions on the metrics
# ========================================================

max_x = n = 10;
x = 1:max_x;

numOfHashTables = 10;

y1 = mean(UBDiversity);
y2 = mean(IBDiversity);
y3 = UBLSHHashFunctionsDiversityList0;
y4 = IBLSHHashFunctionsDiversityList0;
y5 = LSHDiversityList;
f= figure();
plot ([1,n], [y1, y1],'-k', [1,n], [y2, y2],'-.k', x,y3,'-dk', x,y4,'-*k');
legend("UB", "IB", "UB-LSH", "IB-LSH");
xlabel("Number of Hash Functions");
ylabel("Diversity");
write(f, strcat(fileName,'-diversity-hash-functions'));


y1 = mean(UBAggrDiversityList);
y2 = mean(IBAggrDiversityList);
y3 = UBLSHHashFunctionsAggrDiversityList0;
y4 = IBLSHHashFunctionsAggrDiversityList0;
y5 = LSHAggrDiversityList;
f= figure();
plot ([1,n], [y1, y1],'-k', [1,n], [y2, y2], '-.k', x, y3, '-dk',x, y4, '-*k');
legend("UB", "IB", "UB-LSH", "IB-LSH");
xlabel("Number of Hash Functions");
ylabel("Aggregate Diversity");
write(f, strcat(fileName,'-aggr-diversity-hash-functions'));

y1 = mean(UBNolvelty);
y2 = mean(IBNolvelty);
y3 = UBLSHHashFunctionsNoveltyList0;
y4 = IBLSHHashFunctionsNoveltyList0;
y5 = LSHnoveltyList;
f= figure();
plot ([1,n], [y1, y1],'-k', [1,n], [y2, y2], '-.k', x, y3, '-dk',x, y4, '-*k');
legend("UB", "IB", "UB-LSH", "IB-LSH");
xlabel("Number of Hash Functions");
ylabel("Novelty");
write(f, strcat(fileName,'-novelty-hash-functions'));

y1 = mean(UBSerendipity);
y2 = mean(IBSerendipity);
y3 = UBLSHHashFunctionsSerendipityList0;
y4 = IBLSHHashFunctionsSerendipityList0;
f= figure();
plot ([1,n], [y1, y1],'-k', [1,n], [y2, y2], '-.k', x, y3, '-dk',x, y4, '-*k');
legend("UB", "IB", "UB-LSH", "IB-LSH");
xlabel("Number of Hash Functions");
ylabel("Serendipity");
write(f, strcat(fileName,'-serendipity-hash-functions'));

y1 = mean(UBPrecisionList);
y2 = mean(IBPrecisionList);
y3 = UBLSHHashFunctionsPrecisionList0;
y4 = IBLSHHashFunctionsPrecisionList0;
y5 = LSHPrecisionList;
f= figure();
plot ([1,n], [y1, y1],'-k', [1,n], [y2, y2], '-.k', x, y3, '-dk',x, y4, '-*k');
legend("UB", "IB", "UB-LSH", "IB-LSH");
xlabel("Number of Hash Functions");
ylabel("Precision");
write(f, strcat(fileName,'-precision-hash-functions'));

y1 = mean(UBRecallList);
y2 = mean(IBRecallList);
y3 = UBLSHHashFunctionsRecallList0;
y4 = IBLSHHashFunctionsRecallList0;
y5 = LSHRecallList;
f= figure();
plot ([1,n], [y1, y1],'-k', [1,n], [y2, y2], '-.k', x, y3, '-dk',x, y4, '-*k');
legend("UB", "IB", "UB-LSH", "IB-LSH");
xlabel("Number of Hash Functions");
ylabel("Recall")
write(f, strcat(fileName,'-recall-hash-functions'));


y3 = UBLSHHashFunctionsCandidateSetList0;
y4 = IBLSHHashFunctionsCandidateSetList0;
f= figure();
plot (x, y3, '-dk',x, y4, '-*k');
legend("UB-LSH", "IB-LSH");
xlabel("Number of Hash Functions");
ylabel("Candidate Set Size")
write(f, strcat(fileName,'-candidate-set-hash-functions'));


# ========================================================
# Number of Hash Tables on the metrics
# ========================================================

n= 10;

x = 1:1:n;
numOfHashFunctions = 6;

y1 = mean(UBDiversity);
y2 = mean(IBDiversity);
y3 = UBLSHHashTablesDiversityList0;
y4 = IBLSHHashTablesDiversityList0;
f= figure();
plot ([1,n], [y1, y1],'-k', [1,n], [y2, y2], '-.k', x, y3, '-dk',x, y4, '-*k');
legend("UB", "IB", "UB-LSH", "IB-LSH");
xlabel("Number of Hash Tables");
ylabel("Diversity");
write(f, strcat(fileName,'-diversity-hash-tables'));

y1 = mean(UBAggrDiversityList);
y2 = mean(IBAggrDiversityList);
y3 = UBLSHHashTablesAggrDiversityList0;
y4 = IBLSHHashTablesAggrDiversityList0;
f= figure();
plot ([1,n], [y1, y1],'-k', [1,n], [y2, y2], '-.k', x, y3, '-dk',x, y4, '-*k');
legend("UB", "IB", "UB-LSH", "IB-LSH");
xlabel("Number of Hash Tables");
ylabel("Aggregate Diversity");
write(f, strcat(fileName,'-aggr-diversity-hash-tables'));

y1 = mean(UBNolvelty);
y2 = mean(IBNolvelty);
y3 = UBLSHHashTablesNoveltyList0;
y4 = IBLSHHashTablesNoveltyList0;
f= figure();
plot ([1,n], [y1, y1],'-k', [1,n], [y2, y2], '-.k', x, y3, '-dk',x, y4, '-*k');
legend("UB", "IB", "UB-LSH", "IB-LSH");
xlabel("Number of Hash Tables");
ylabel("Novelty");
write(f, strcat(fileName,'-novelty-hash-tables'));

y1 = mean(UBSerendipity);
y2 = mean(IBSerendipity);
y3 = UBLSHHashTablesSerendipityList0;
y4 = IBLSHHashTablesSerendipityList0;
f= figure();
plot ([1,n], [y1, y1],'-k', [1,n], [y2, y2], '-.k', x, y3, '-dk',x, y4, '-*k');
legend("UB", "IB", "UB-LSH", "IB-LSH");
xlabel("Number of Hash Tables");
ylabel("Serendipity");
write(f, strcat(fileName,'-Serendipity-hash-tables'));

y1 = mean(UBPrecisionList);
y2 = mean(IBPrecisionList);
y3 = UBLSHHashTablesPrecisionList0;
y4 = IBLSHHashTablesPrecisionList0;
y5 = LSHPrecisionList;
f= figure();
plot ([1,n], [y1, y1],'-k', [1,n], [y2, y2], '-.k', x, y3, '-dk',x, y4, '-*k');
legend("UB", "IB", "UB-LSH", "IB-LSH");
xlabel("Number of Hash Tables");
ylabel("Precision");
write(f, strcat(fileName,'-precision-hash-tables'));

y1 = mean(UBRecallList);
y2 = mean(IBRecallList);
y3 = UBLSHHashTablesRecallList0;
y4 = IBLSHHashTablesRecallList0;
y5 = LSHRecallList;
f= figure();
plot ([1,n], [y1, y1],'-k', [1,n], [y2, y2], '-.k', x, y3, '-dk',x, y4, '-*k');
legend("UB", "IB", "UB-LSH", "IB-LSH");
xlabel("Number of Hash Tables");
ylabel("Recall")
write(f, strcat(fileName,'-recall-hash-tables'));

y3 = UBLSHHashTablesCandidateSetList0;
y4 = IBLSHHashTablesCandidateSetList0;
f= figure();
plot (x, y3, '-dk',x, y4, '-*k');
legend("UB-LSH", "IB-LSH");
xlabel("Number of Hash Tables");
ylabel("Candidate Set Size")
write(f, strcat(fileName,'-candidate-set-hash-tables'));



# ========================================================
# Model build time
# Test case: 8
# ========================================================

# Running time

x = UBnumOfUsersList/1000;
x2 = IBnumOfItemsList/1000;
y1 = UBmodelBuildTimeList/1000;
y2 = IBmodelBuildTimeList/1000;
y3 = UBLSHmodelBuildTimeList/1000;
y4 = IBLSHmodelBuildTimeList/1000;

f= figure();
plot (x,y1,'-dk', x, y3, '--*k');
legend("UB","UB-LSH");
xlabel("users(x1000)")
ylabel("Model Build Time (sec)");
write(f, strcat(fileName,'-model-build-time-ub'));

f= figure();
plot (x2, y2, '-dk', x2, y4, '--*k' );
legend("IB", "IB-LSH");
xlabel("items(x1000)")
ylabel("Model Build Time(sec)");
write(f, strcat(fileName,'-model-build-time-ib'));




# ========================================================
# k and MAE/runtime
# Test case: 5/6/7/07
# ========================================================

y1=UBMaeList;
y2=IBMaeList;
y3=UBLSHMaeList;
y4=IBLSHMaeList;
x= 1:3:30;

f= figure();
plot (x,y1,'-dk', x,y2, '--ok', x, y3, '--*k', x, y4, '->k');
legend("UB", "IB", "UB-LSH", "IB-LSH")
xlabel("k")
ylabel("MAE")
write(f, strcat(fileName,'-mae-k'));

y1=UBLSHCandidateSetList;
y2=IBLSHCandidateSetList;

f= figure();
plot (x,y1,'-dk', x,y2, '-*k');
legend("UB-LSH", "IB-LSH")
xlabel("k")
ylabel("Avg. Candidate Set Size")
write(f, strcat(fileName,'-candidate-set-k'));


# ========================================================
# Hash Tables against to MAE and Runtime
# test case: 10
# ========================================================
x = 1:10;
n = 10;

f= figure();
y1 = UBMaeList;
y2 = IBMaeList;
plot ([1,n], [y1, y1], '-.k', [1,n], [y2, y2],'--k', x, UBLSHHashTablesMaeList, '-dk',x, IBLSHHashTablesMaeList, '-*k');
xlabel("Number of Hash Tables");
ylabel("MAE");
legend("User-based", "Item-based","UB-LSH", "IB-LSH");
write(f, strcat(fileName,'-hash-tables-mae'));

f= figure();
y1 = UBRuntime/1000;
y2 = IBRuntime/1000;
plot([1,n], [y1, y1], '-.k', [1,n], [y2, y2],'--k', x, UBLSHHashTablesRuntimeList/1000, '-dk', x, IBLSHHashTablesRuntimeList/1000, '-*k');
xlabel("Number of Hash Tables");
ylabel("Running Time (sec)");
legend("User-based", "Item-based","UB-LSH", "IB-LSH");
write(f, strcat(fileName,'-hash-tables-runtime'));

f= figure();
y1 = numOfUsers/1000;
y2 = numOfItems/1000;
y3 = UBLSHHashTablesCandidateSetList /1000;
y4 = IBLSHHashTablesCandidateSetList / 1000;
plot([1,n], [y1, y1], '-.k', [1,n], [y2, y2],'--k', x, y3, '-dk',x, y4, '-*k');
xlabel("Number of Hash Tables");
ylabel("Candidate set size (K)");
legend("numOfUsers", "numOfItems", "UB-LSH", "IB-LSH");
write(f, strcat(fileName,'-hash-tables-candidate-set'));


# ========================================================
# Hash Functions against to MAE and Runtime
# test case: 11
# ========================================================

x=1:10;
n = 10;


f= figure();
y1 = UBMaeList;
y2 = IBMaeList;
y3=UBLSHHashFunctionsMaeList;
y4=IBLSHHashFunctionsMaeList;
plot([1,n], [y1, y1], '-.k', [1,n], [y2, y2],'--k', x, y3, '-dk',x, y4, '-*k');
xlabel("Number of Hash Functions");
ylabel("MAE");
legend("user-based", "item-based", "UB-LSH", "IB-LSH");
write(f, strcat(fileName,'-hash-functions-mae'));


f= figure();
y1 =UBRuntime/1000;
y2 =IBRuntime/1000;
y3=UBLSHHashFunctionsRuntimeList/1000;
y4=IBLSHHashFunctionsRuntimeList/1000;
plot([1,n], [y1, y1], '-.k', [1,n], [y2, y2],'--k', x, y3, '-dk',x, y4, '-*k');
xlabel("Number of Hash Functions");
ylabel("Running Time (sec)");
legend("user-based", "item-based", "UB-LSH", "IB-LSH");
write(f, strcat(fileName,'-hash-functions-runtime'));

f= figure();
y1 = numOfUsers/1000;
y2 = numOfItems/1000;
y3=UBLSHHashFunctionsCandidateSetList/1000;
y4=IBLSHHashFunctionsCandidateSetList/1000;
plot([1,n], [y1, y1], '-.k', [1,n], [y2, y2],'--k', x, y3, '-dk',x, y4, '-*k');
legend("numOfUsers", "numOfItems", "UB-LSH", "IB-LSH");
xlabel("Number of Hash Functions");
ylabel("Candidate Set Size (K)");
write(f, strcat(fileName,'-hash-functions-candidate-set'));

