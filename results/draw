 f = figure();
 bar(numberOfRatings * 10, numberOfUsers);
 xlabel("Number of Ratings");
 ylabel("Number of Users");
 title("Amazon 1M Data Set");
 write(f, "amazon-1m-histo");


function write (f, file_name)
  H = 3.2; W = 4;
  h = f;
  set (h,'papertype', '<custom>')
  set (h,'paperunits','inches');
  set (h,'papersize',[H W])
  set (h,'paperposition', [0,0,[W H]])
  set (h,'defaultaxesposition', [0.15, 0.15, 0.75, 0.75])
  set (0,'defaultaxesfontsize', 10)
  out_file_name = strcat (file_name,'.eps');
  print('-depsc',  out_file_name);
endfunction

write (f, "ml-mae-k");

# ========================================================
# test case: UBLSH 2D
# test case: 59
# ========================================================
dataFileBase = data/100k/ml
k = 20

x = 1:10;
y = 1:10;

f= figure();

# Heatmaps
data = UBLSHMae2D;
contourf(x, y, data);
axis square;
colorbar;
xlabel("Hash Functions");
ylabel("Hash Tables");
title("MAE");
write(f, strcat(fileName,'-ublsh-heat-map-mae'));

f= figure();
data = UBLSHRuntime2D / 1000;
contourf(x, y, data);
axis square;
colorbar;
xlabel("Hash Functions");
ylabel("Hash Tables");
title("Running Time (sec)");
write(f, strcat(fileName,'-ublsh-heat-map-runtime'));

f= figure();
data = UBLSHCandidate_Set_List2D;
contourf(x, y, data);
axis square;
colorbar;
xlabel("Hash Functions");
ylabel("Hash Tables");
title("Candidate Set Size");
write(f, strcat(fileName,'-ublsh-heat-map-candidate'));


# ========================================================
# test case: IBLSH 2D
# ========================================================

x = 1:10;
y = 1:10;

f= figure();
IBLSHMae2D = [[0.8424117498386844, 0.8620236865152805, 0.8972723856108772, 0.9486827680673473, 1.0112789638001096, 1.089079728505732, 1.1529337136402866, 1.1911144942501801, 1.2660269144475056, 1.2827596161582082]; [0.8314664094536247, 0.8395058760771524, 0.8620327026845894, 0.8922742134725995, 0.9342891229527824, 0.985044459359306, 1.0708932056479745, 1.1524878269097818, 1.19728736771519, 1.2436876254842113]; [0.8292280889907825, 0.8342745616324732, 0.8464501637185643, 0.8666024212007885, 0.8982464497391921, 0.9596557379716172, 1.0192382049936346, 1.0904501615499747, 1.1781134964446685, 1.217936828785886]; [0.8292351913415509, 0.8311105296354695, 0.8391249776674289, 0.8556843782854239, 0.8841169052465333, 0.9292968401990738, 0.9922687473875064, 1.0538577935887103, 1.1285073871949471, 1.2102450904730369]; [0.8285283182186859, 0.8296924705262708, 0.8366013169145509, 0.8501570644124573, 0.8706660539378942, 0.9074658108726217, 0.9699632861992443, 1.0372479059239774, 1.1007015165169536, 1.1751317147658957]; [0.8284605982070191, 0.8289607345197186, 0.8348201355079583, 0.8452532622777681, 0.8650578235971403, 0.8968530127369, 0.9335997868490725, 1.0064895859990912, 1.0762038975459283, 1.1456715233507235]; [0.8282884129551279, 0.8293235775089384, 0.832955266443505, 0.8384493001777246, 0.8611484244311525, 0.8868213017858663, 0.9265343137961461, 0.9914294341215202, 1.0582330101545532, 1.1389670483418879]; [0.8284420679143061, 0.8287311656125586, 0.830543763946911, 0.8353957505073758, 0.8523361826216354, 0.8832540151356878, 0.915026301910741, 0.9694623954339305, 1.0468228505832444, 1.1269317460896644]; [0.8283805518483804, 0.8286092802923001, 0.8308734959464944, 0.834336376901217, 0.850401325658345, 0.8698358926973425, 0.9097096490706197, 0.9587089732499431, 1.0360924261485895, 1.1006402555153179]; [0.828252548500688, 0.8288688622031155, 0.8307179319859815, 0.8359918666151152, 0.8467770892997791, 0.8703431881487328, 0.9034947262185224, 0.950796748928416, 1.0157107351266916, 1.1034631997636397]];
IBLSHRuntime2D = [[5681.333333333333, 3130.6666666666665, 1950.0, 1224.3333333333333, 732.3333333333334, 485.3333333333333, 421.6666666666667, 413.3333333333333, 344.0, 319.6666666666667]; [8185.666666666667, 5186.333333333333, 3200.6666666666665, 1920.6666666666667, 1455.6666666666667, 991.0, 717.0, 815.6666666666666, 585.0, 673.6666666666666]; [9631.0, 6966.666666666667, 4395.0, 2875.3333333333335, 1923.0, 1201.3333333333333, 1080.3333333333333, 950.6666666666666, 840.6666666666666, 842.0]; [11559.333333333334, 8445.0, 5474.333333333333, 3568.0, 2396.6666666666665, 1524.6666666666667, 1383.6666666666667, 1484.0, 1446.3333333333333, 1266.3333333333333]; [13954.0, 9859.666666666666, 6596.0, 4223.666666666667, 2689.6666666666665, 2087.6666666666665, 1666.0, 1502.3333333333333, 1428.0, 1436.3333333333333]; [13201.0, 10088.333333333334, 7343.333333333333, 4878.666666666667, 3388.3333333333335, 2606.3333333333335, 2322.0, 1811.6666666666667, 1800.3333333333333, 1847.0]; [13494.0, 10871.333333333334, 8224.0, 5569.666666666667, 3682.3333333333335, 2900.3333333333335, 2130.6666666666665, 1982.6666666666667, 2078.6666666666665, 2201.0]; [14247.666666666666, 12069.0, 8820.0, 6187.0, 4174.0, 3186.0, 2665.0, 2279.3333333333335, 2949.3333333333335, 2595.3333333333335]; [14845.666666666666, 12713.333333333334, 9841.666666666666, 7059.0, 4917.666666666667, 3539.3333333333335, 3166.0, 2912.3333333333335, 2799.0, 2937.0]; [15782.0, 13338.333333333334, 10473.333333333334, 7519.0, 5718.0, 3873.6666666666665, 3439.3333333333335, 3584.3333333333335, 3587.3333333333335, 3257.3333333333335]];
IBLSHCandidate_Set_List2D = [[1747.3293039879045, 860.453289127238, 504.5025609010238, 231.8078917277719, 114.56890967682106, 59.57316144650005, 33.44237299268945, 17.862602435488963, 7.9794804176133285, 3.9760725573903692]; [2544.2891368702626, 1493.4984601971264, 838.9581751882837, 430.36780845736547, 246.76287754715648, 128.01466512440743, 61.41516869081291, 35.04268474267344, 17.16621461470015, 8.757274230691953]; [2903.9339887659057, 1962.5371279037417, 1163.6665461397151, 643.5413552202771, 349.05418462013176, 178.08566430304677, 96.98966084648725, 47.4365499843235, 24.337045174285233, 13.137137177168823]; [3133.04720088782, 2331.7509573847387, 1475.685648529941, 820.5326739126355, 459.504575415041, 236.36905203496522, 121.33028759215468, 65.78968009712811, 34.865895992444365, 17.772049201050105]; [3223.3554139977964, 2587.919878584345, 1716.4825183895366, 992.6472199452646, 550.2807004528523, 295.0186708722762, 150.24230744391232, 80.07054247615956, 41.76808126447593, 22.21105806490074]; [3273.4423718059115, 2783.1622531640046, 1909.389998871181, 1169.07284467341, 653.4629180218013, 346.8982724654289, 191.682564163283, 97.81242982830912, 51.81764413003111, 27.498954352107607]; [3296.628828904168, 2922.570657952405, 2097.5338690945377, 1311.6116705802735, 742.329258200359, 401.7977754539011, 213.56621283453333, 112.80525684632828, 58.7698286982758, 31.393817246145456]; [3305.5703883606348, 3040.3038077491624, 2283.597896436244, 1441.7828253648102, 811.3497589460972, 455.6375268956983, 241.79845536721666, 125.18195731960425, 67.03921973771656, 34.404160594779945]; [3309.6285435530917, 3109.8484813935306, 2420.976940878591, 1598.7565773850922, 931.8438339024347, 503.4014843555079, 275.0945178452751, 147.8409830412204, 74.07262327034027, 39.587068178456065]; [3312.8764361254075, 3163.021102718108, 2546.6964523069855, 1673.0833487062464, 1036.2950108410778, 563.8000131373548, 304.96352064275885, 161.58231295276957, 84.5959549642642, 41.57462468840182]];

# Heatmaps
data = IBLSHMae2D;
contourf(x, y, data);
axis square;
colorbar;
xlabel("Hash Functions");
ylabel("Hash Tables");
title("MAE");
write(f, strcat(fileName,'-iblsh-heat-map-mae'));

f= figure();
data = IBLSHRuntime2D / 1000;
contourf(x, y, data);
axis square;
colorbar;
xlabel("Hash Functions");
ylabel("Hash Tables");
title("Running Time (sec)");
write(f, strcat(fileName,'-iblsh-heat-map-runtime'));

f= figure();
data = IBLSHCandidate_Set_List2D;
contourf(x, y, data);
axis square;
colorbar;
xlabel("Hash Functions");
ylabel("Hash Tables");
title("Candidate Set Size");
write(f, strcat(fileName,'-iblsh-heat-map-candidate'));


# ========================================================
# Model build time
# Test case: 8
# ========================================================

# Running time

x = UBnumOfUsersList/1000;
x2 = IBnumOfItemsList/1000;
y1 = UBmodelBuildTimeList/1000;
y2 = IBmodelBuildTimeList/1000;
y3 = UBLSHmodelBuildTimeList/1000;
y4 = IBLSHmodelBuildTimeList/1000;

f= figure();
plot (x, y1, '-dk', x, y3, '--*k');
legend("UB","UB-LSH", "location", "northwest");
xlabel("users(x1000)")
ylabel("Model Build Time (sec)");
write(f, strcat(fileName,'-model-build-time-ub'));

f= figure();
plot (x2, y2, '-dk', x2, y4, '--*k' );
legend("IB", "IB-LSH", "location", "northwest");
xlabel("items(x1000)")
ylabel("Model Build Time(sec)");
write(f, strcat(fileName,'-model-build-time-ib'));


# ========================================================
# k and MAE/runtime
# Test case: 5/6/7/07
# ========================================================

y1=UBMaeList;
y2=IBMaeList;
y3=UBLSHMaeList;
y4=IBLSHMaeList;
x= 1:3:30;

f= figure();
plot (x,y1,'-dk', x,y2, '--*k');
legend("UB", "IB");
legend boxon
xlabel("k")
ylabel("MAE")
write(f, strcat(fileName,'-mae-k'));


f= figure();
n=30;
y1 = numOfUsers/1000;
y2 = numOfItems/1000;
y3=UBLSHCandidateSetList/1000;
y4=IBLSHCandidateSetList/1000;

plot([1,n], [y1, y1], '-.k', [1,n], [y2, y2],'--k', x, y3, '-dk',x, y4, '-*k');
legend("numOfUsers", "numOfItems", "UB-LSH", "IB-LSH", "location", "west");
xlabel("k")
ylabel("Avg. Candidate Set Size (K)")
write(f, strcat(fileName,'-candidate-set-k'));

# ========================================================
# y and MAE
# Test case: 500/520
# ========================================================

y1=UBMaeList;
y2=IBMaeList;
x= 1:3:30;

f= figure();
plot (x,y1,'-dk', x, y2, '-*k')
legend("UB", "IB")
xlabel("Significance(Y)")
ylabel("MAE")
write(f, strcat(fileName,'-mae-y'));


# ========================================================
# Hash Tables against to MAE and Runtime
# test case: 5000
# ========================================================
x = 1:10;
n = 10;

f= figure();
y1 = UBMaeList(10);
y2 = IBMaeList(10);
y3 = UBLSHHashTablesMaeList;
y4 = IBLSHHashTablesMaeList;
y5 = LSHHashTablesMaeList(1:10);
plot ([1,n], [y1, y1], '-.k', [1,n], [y2, y2],'--k', x, y3 , '-dk', x, y4, '-*k', x, y5, '-ok');
xlabel("Number of Hash Tables");
ylabel("MAE");
legend("UB", "IB","UB-LSH", "IB-LSH", "LSH", "location", "southoutside");
write(f, strcat(fileName,'-hash-tables-mae'));

f= figure();
y1 = UBRuntime/1000;
y2 = IBRuntime/1000;
y3 = UBLSHHashTablesRuntimeList/1000;
y4 = IBLSHHashTablesRuntimeList/1000;
y5 = LSHHashTablesRuntimeList(1:10)/1000;
plot([1,n], [y1, y1], '-.k', [1,n], [y2, y2],'--k', x, y3, '-dk', x, y4, '-*k', x, y5, '-ok');
xlabel("Number of Hash Tables");
ylabel("Running Time (sec)");
legend("UB", "IB","UB-LSH", "IB-LSH", "LSH", "location", "southoutside");
write(f, strcat(fileName,'-hash-tables-runtime'));

f= figure();
y1 = numOfUsers/1000;
y2 = numOfItems/1000;
y3 = UBLSHHashTablesCandidateSetList/1000;
y4 = IBLSHHashTablesCandidateSetList/1000;
y5 = LSHCandidateSetList(1:10)/1000;
plot(x, y3, '-dk',x, y4, '-*k', x, y5, '-ok');
xlabel("Number of Hash Tables");
ylabel("Candidate set size (K)");
legend("UB-LSH", "IB-LSH", "LSH", "location", "southoutside");
write(f, strcat(fileName,'-hash-tables-candidate-set'));


# ========================================================
# Hash Functions against to MAE and Runtime
# test case: 5000
# ========================================================


x=1:10;
n = 10;

f = figure();
y1 = UBMaeList;
y2 = IBMaeList;
y3 = UBLSHHashFunctionsMaeList;
y4 = IBLSHHashFunctionsMaeList;
y5 = LSHHashFunctionsMaeList(1:10)
plot([1,n], [y1, y1], '-.k', [1,n], [y2, y2],'--k', x, y3, '-dk',x, y4, '-*k', x,y5,'-ok');
xlabel("Number of Hash Functions");
ylabel("MAE");
legend("UB", "IB", "UB-LSH", "IB-LSH", "LSH", "location", "southoutside");
write(f, strcat(fileName,'-hash-functions-mae'));

f= figure();
y1 = UBRuntime/1000;
y2 = IBRuntime/1000;
y3 = UBLSHHashFunctionsRuntimeList/1000;
y4 = IBLSHHashFunctionsRuntimeList/1000;
y5 = LSHHashFunctionsRuntimeList(1:10)/1000;
plot([1,n], [y1, y1], '-.k', [1,n], [y2, y2],'--k', x, y3, '-dk',x, y4, '-*k', x,y5,'-ok');
xlabel("Number of Hash Functions");
ylabel("Running Time (sec)");
legend("UB", "IB", "UB-LSH", "IB-LSH", "LSH", "location", "southoutside");
write(f, strcat(fileName,'-hash-functions-runtime'));

f = figure();
y3 = UBLSHHashFunctionsCandidateSetList;
y4 = IBLSHHashFunctionsCandidateSetList;
y5 = LSHCandidateSetList(1:10);
plot( x, y3, '-dk',x, y4, '-*k', x,y5,'-ok');
legend("UB-LSH", "IB-LSH", "LSH", "location", "southoutside");
xlabel("Number of Hash Functions");
ylabel("Avg. Candidate Set Size");
write(f, strcat(fileName,'-hash-functions-candidate-set'));

f = figure();
x = 1:10;
total_test_data = 9939;
y2 = UBLSHHashFunctionsPredictedItemsList/total_test_data;
y3 = IBLSHHashFunctionsPredictedItemsList/total_test_data;
y5 = PredictedItemsList(1:10)/total_test_data;
plot(x, y2, '-dk', x, y3, '-*k', x,y5,'-ok');
legend("UB-LSH", "IB-LSH", "LSH", "location", "southoutside");
legend boxon;
xlabel("Number of Hash Functions");
ylabel("Prediction Ratio");
write(f, strcat(fileName,'-hash-functions-prediction-ratio'));



# ========================================================
# Number of Hash Functions on the metrics
# ========================================================

max_x = n = 10;
x = 1:max_x;

numOfHashTables = 10;

y1 = mean(UBDiversity);
y2 = mean(IBDiversity);
y3 = UBLSHHashFunctionsDiversityList0;
y4 = IBLSHHashFunctionsDiversityList0;
y5 = LSHHashFunctionsDiversityList(1:10);
f= figure();
plot ([1,n], [y1, y1],'-.k', [1,n], [y2, y2],'--k', x,y3,'-dk', x,y4,'-*k', x,y5,'-ok');
legend("UB", "IB", "UB-LSH", "IB-LSH", "LSH", "location", "southwest");
xlabel("Number of Hash Functions");
ylabel("Diversity");
write(f, strcat(fileName,'-hash-functions-diversity'));

y1 = mean(UBAggrDiversityList);
y2 = mean(IBAggrDiversityList);
y3 = UBLSHHashFunctionsAggrDiversityList0;
y4 = IBLSHHashFunctionsAggrDiversityList0;
y5 = LSHHashFunctionsAggrDiversityList(1:10);
f= figure();
plot ([1,n], [y1, y1],'-.k', [1,n], [y2, y2],'--k', x,y3,'-dk', x,y4,'-*k', x,y5,'-ok');
legend("UB", "IB", "UB-LSH", "IB-LSH", "LSH", "location", "northwest");
xlabel("Number of Hash Functions");
ylabel("Aggregate Diversity");
write(f, strcat(fileName,'-hash-functions-aggr-diversity'));

y1 = mean(UBNolvelty);
y2 = mean(IBNolvelty);
y3 = UBLSHHashFunctionsNoveltyList0;
y4 = IBLSHHashFunctionsNoveltyList0;
y5 = LSHHashFunctionsNoveltyList(1:10);
f= figure();
plot ([1,n], [y1, y1],'-.k', [1,n], [y2, y2],'--k', x,y3,'-dk', x,y4,'-*k', x,y5,'-ok');
legend("UB", "IB", "UB-LSH", "IB-LSH", "LSH", "location", "northwest");
xlabel("Number of Hash Functions");
ylabel("Novelty");
write(f, strcat(fileName,'-hash-functions-novelty'));

y1 = mean(UBSerendipity);
y2 = mean(IBSerendipity);
y3 = UBLSHHashFunctionsSerendipityList0;
y4 = IBLSHHashFunctionsSerendipityList0;
y5 = LSHHashFunctionsSerendipityList(1:10);
f= figure();
plot ([1,n], [y1, y1],'-.k', [1,n], [y2, y2],'--k', x,y3,'-dk', x,y4,'-*k', x,y5,'-ok');
legend("UB", "IB", "UB-LSH", "IB-LSH", "LSH", "location", "west");
xlabel("Number of Hash Functions");
ylabel("Serendipity");
write(f, strcat(fileName,'-hash-functions-serendipity'));

y1 = mean(UBPrecisionList);
y2 = mean(IBPrecisionList);
y3 = UBLSHHashFunctionsPrecisionList0;
y4 = IBLSHHashFunctionsPrecisionList0;
y5 = LSHHashFunctionsPrecisionList(1:10);
f= figure();
plot ([1,n], [y1, y1],'-.k', [1,n], [y2, y2],'--k', x,y3,'-dk', x,y4,'-*k', x,y5,'-ok');
legend("UB", "IB", "UB-LSH", "IB-LSH", "LSH", "location", "northeast");
xlabel("Number of Hash Functions");
ylabel("Precision");
write(f, strcat(fileName,'-hash-functions-precision'));

y1 = mean(UBRecallList);
y2 = mean(IBRecallList);
y3 = UBLSHHashFunctionsRecallList0;
y4 = IBLSHHashFunctionsRecallList0;
y5 = LSHHashFunctionsRecallList(1:10);

f= figure();
plot ([1,n], [y1, y1],'-.k', [1,n], [y2, y2],'--k', x,y3,'-dk', x,y4,'-*k', x,y5,'-ok');
legend("UB", "IB", "UB-LSH", "IB-LSH", "LSH", "location", "northeast");
xlabel("Number of Hash Functions");
ylabel("Recall")
write(f, strcat(fileName,'-hash-functions-recall'));

y1 = numOfUsers/1000;
y2 = numOfItems/1000;
y3 = UBLSHHashFunctionsCandidateSetList0/1000;
y4 = IBLSHHashFunctionsCandidateSetList0/1000;
f= figure();
plot(x, y3, '-dk',x, y4, '-*k');
plot ([1,n], [y1, y1],'-.k', [1,n], [y2, y2],'--k', x,y3,'-dk', x,y4,'-*k');
legend("numofUsers", "numOfItems","UB-LSH", "IB-LSH");
xlabel("Number of Hash Functions");
ylabel("Avg. Candidate Set Size (K)")
write(f, strcat(fileName,'-hash-functions-evaluation-candidate-set'));



# ========================================================
# Number of Hash Tables on the metrics
# ========================================================

n= 10;

x = 1:1:n;
numOfHashFunctions = 6;

y1 = mean(UBDiversity);
y2 = mean(IBDiversity);
y3 = UBLSHHashTablesDiversityList0;
y4 = IBLSHHashTablesDiversityList0;
y5 = LSHHashTablesDiversityList(1:10);
f= figure();
plot ([1,n], [y1, y1],'-.k', [1,n], [y2, y2],'--k', x,y3,'-dk', x,y4,'-*k', x,y5,'-ok');
legend("UB", "IB", "UB-LSH", "IB-LSH", "LSH", "location", "southeast");
xlabel("Number of Hash Tables");
ylabel("Diversity");
write(f, strcat(fileName,'-hash-tables-diversity'));

y1 = mean(UBAggrDiversityList);
y2 = mean(IBAggrDiversityList);
y3 = UBLSHHashTablesAggrDiversityList0;
y4 = IBLSHHashTablesAggrDiversityList0;
y5 = LSHHashTablesAggrDiversityList(1:10);
f= figure();
plot ([1,n], [y1, y1],'-.k', [1,n], [y2, y2],'--k', x,y3,'-dk', x,y4,'-*k', x,y5,'-ok');
legend("UB", "IB", "UB-LSH", "IB-LSH", "LSH",  "location", "west");
xlabel("Number of Hash Tables");
ylabel("Aggregate Diversity");
write(f, strcat(fileName,'-hash-tables-aggr-diversity'));

y1 = mean(UBNolvelty);
y2 = mean(IBNolvelty);
y3 = UBLSHHashTablesNoveltyList0;
y4 = IBLSHHashTablesNoveltyList0;
y5 = LSHHashTablesNoveltyList(1:10);
f= figure();
plot ([1,n], [y1, y1],'-.k', [1,n], [y2, y2],'--k', x,y3,'-dk', x,y4,'-*k', x,y5,'-ok');
legend("UB", "IB", "UB-LSH", "IB-LSH", "LSH", "location", "east");
xlabel("Number of Hash Tables");
ylabel("Novelty");
write(f, strcat(fileName,'-hash-tables-novelty'));

y1 = mean(UBSerendipity);
y2 = mean(IBSerendipity);
y3 = UBLSHHashTablesSerendipityList0;
y4 = IBLSHHashTablesSerendipityList0;
f= figure();
plot ([1,n], [y1, y1],'-.k', [1,n], [y2, y2],'--k', x,y3,'-dk', x,y4,'-*k', x,y5,'-ok');
legend("UB", "IB", "UB-LSH", "IB-LSH", "LSH", "location", "east");
xlabel("Number of Hash Tables");
ylabel("Serendipity");
write(f, strcat(fileName,'-hash-tables-serendipity'));

y1 = mean(UBPrecisionList);
y2 = mean(IBPrecisionList);
y3 = UBLSHHashTablesPrecisionList0;
y4 = IBLSHHashTablesPrecisionList0;
y5 = LSHHashTablesPrecisionList(1:10);
f= figure();
plot ([1,n], [y1, y1],'-.k', [1,n], [y2, y2],'--k', x,y3,'-dk', x,y4,'-*k', x,y5,'-ok');
legend("UB", "IB", "UB-LSH", "IB-LSH", "LSH", "location", "northwest");
xlabel("Number of Hash Tables");
ylabel("Precision");
write(f, strcat(fileName,'-hash-tables-precision'));

y1 = mean(UBRecallList);
y2 = mean(IBRecallList);
y3 = UBLSHHashTablesRecallList0;
y4 = IBLSHHashTablesRecallList0;
y5 = LSHHashTablesRecallList(1:10);
f= figure();
plot ([1,n], [y1, y1],'-.k', [1,n], [y2, y2],'--k', x,y3,'-dk', x,y4,'-*k', x,y5,'-ok');
legend("UB", "IB", "UB-LSH", "IB-LSH", "LSH", "location", "northeast");
xlabel("Number of Hash Tables");
ylabel("Recall")
write(f, strcat(fileName,'-hash-tables-recall'));


f= figure();
y1 = numOfUsers/1000;
y2 = numOfItems/1000;
y3 = UBLSHHashTablesCandidateSetList0/1000;
y4 = IBLSHHashTablesCandidateSetList0/1000;
plot ([1,n], [y1, y1],'-.k', [1,n], [y2, y2],'--k', x,y3,'-dk', x,y4,'-*k');
legend("numofUsers", "numOfItems","UB-LSH", "IB-LSH", "location", "northwest");

xlabel("Number of Hash Tables");
ylabel("Avg. Candidate Set Size (K)");
write(f, strcat(fileName,'-hash-tables-evaluation-candidate-set'));

# Histograms

f = figure();
bar(numberOfRatings * 10, numberOfUsers);
xlabel("Number of Ratings");
ylabel("Number of Users");
title("Amazon 1M Data Set");
write(f, "amazon-1m-histo");


Data file: data/amazon/amazon-books-1m.data
Total Ratings: 985283
numOfUsers = 7124
numOfItems = 14583
sparsity = 0.0095

User based:
UserHistogram = {0=244, 1=315, 2=322, 3=388, 4=363, 5=418, 6=432, 7=482, 8=446, 9=412, 10=3302}
numberOfRatings = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
numberOfUsers = [244, 315, 322, 388, 363, 418, 432, 482, 446, 412, 3302]
f = figure();
bar(numberOfRatings * 10, numberOfUsers);
xlabel("Number of Ratings");
ylabel("Number of Users");
title("User rating histogram \n(amazon-books)");
write(f, "amazon-books-user-histo");

Item based:
ItemHistogram = {0=1459, 1=1614, 2=2030, 3=1956, 4=1559, 5=1096, 6=811, 7=641, 8=442, 9=424, 10=2551}
numberOfRatings = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
numberOfItems = [1459, 1614, 2030, 1956, 1559, 1096, 811, 641, 442, 424, 2551]
f = figure();
bar(numberOfRatings * 10, numberOfItems);
xlabel("Number of Ratings");
ylabel("Number of Items");
title("Item rating histogram \n(amazon-books)");
write(f, "amazon-books-item-histo");


Data file: data/amazon/amazon-movies-1m.data
Total Ratings: 1193537
numOfUsers = 6929
numOfItems = 12838
sparsity = 0.0134

User based:
UserHistogram = {0=94, 1=166, 2=242, 3=330, 4=421, 5=474, 6=501, 7=504, 8=468, 9=411, 10=3318}
numberOfRatings = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
numberOfUsers = [94, 166, 242, 330, 421, 474, 501, 504, 468, 411, 3318]
f = figure();
bar(numberOfRatings * 10, numberOfUsers);
xlabel("Number of Ratings");
ylabel("Number of Users");
title("User rating histogram \n(amazon-movies)");
write(f, "amazon-movies-user-histo");

Item based:
ItemHistogram = {0=258, 1=393, 2=375, 3=691, 4=821, 5=992, 6=1201, 7=1443, 8=1035, 9=926, 10=4703}
numberOfRatings = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
numberOfItems = [258, 393, 375, 691, 821, 992, 1201, 1443, 1035, 926, 4703]
f = figure();
bar(numberOfRatings * 10, numberOfItems);
xlabel("Number of Ratings");
ylabel("Number of Items");
title("Item rating histogram \n(amazon-movies)");
write(f, "amazon-movies-item-histo");



01:48:10,633  INFO main DataParser:processDataFile:116 - Data file: data/amazon/amovies-80-70.data
01:48:10,634  INFO main DataParser:processDataFile:117 - Total Ratings: 1268771
01:48:10,635  INFO main DataParser:computeSparsity:269 - numOfUsers = 7206
01:48:10,635  INFO main DataParser:computeSparsity:270 - numOfItems = 11866
01:48:10,636  INFO main DataParser:computeSparsity:271 - sparsity = 0.0148

User based histogram
Histogram = {0=14, 1=86, 2=144, 3=264, 4=420, 5=571, 6=634, 7=682, 8=615, 9=436, 10=3340}
numberOfRatings = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
numberOfUsers = [14, 86, 144, 264, 420, 571, 634, 682, 615, 436, 3340]
f = figure();
bar(numberOfRatings * 10, numberOfUsers);
xlabel("Number of Ratings");
ylabel("Number of Users");
title("User rating histogram \n(amazon-movies-NEW)");
write(f, "amazon-movies-new-user-histo");

Item based histogram
Histogram = {0=2, 1=0, 2=0, 3=0, 4=32, 5=649, 6=2031, 7=1781, 8=1534, 9=914, 10=4923}
numberOfRatings = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
numberOfItems = [2, 0, 0, 0, 32, 649, 2031, 1781, 1534, 914, 4923]
f = figure();
bar(numberOfRatings * 10, numberOfItems);
xlabel("Number of Ratings");
ylabel("Number of Items");
title("Item rating histogram \n(amazon-movies-NEW)");
write(f, "amazon-movies-new-item-histo");



16:14:30,552  INFO main DataParser:processDataFile:116 - Data file: data/amovies-50-20.data
16:14:30,559  INFO main DataParser:processDataFile:117 - Total Ratings: 2472618
16:14:30,559  INFO main DataParser:processDataFile:118 - Selected test data: 0 of 2472618 samples
16:14:30,559  INFO main DataParser:computeSparsity:269 - numOfUsers = 14988
16:14:30,560  INFO main DataParser:computeSparsity:270 - numOfItems = 35841
16:14:30,560  INFO main DataParser:computeSparsity:271 - sparsity = 0.0046

User based histogram
Histogram = {0=24, 1=72, 2=183, 3=594, 4=1533, 5=2596, 6=1661, 7=1200, 8=957, 9=723, 10=5445}
numberOfRatings = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
numberOfUsers = [24, 72, 183, 594, 1533, 2596, 1661, 1200, 957, 723, 5445]

f = figure();
bar(numberOfRatings * 10, numberOfUsers);
xlabel("Number of Ratings");
ylabel("Number of Users");
title("User rating histogram \n(amazon-movies-2m)");
write(f, "amazon-movies-2m-user-histo");

Item based histogram
Histogram = {0=0, 1=142, 2=8236, 3=5878, 4=4267, 5=3161, 6=2273, 7=1941, 8=1623, 9=1570, 10=6750}
numberOfRatings = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
numberOfItems = [0, 142, 8236, 5878, 4267, 3161, 2273, 1941, 1623, 1570, 6750]
f = figure();
bar(numberOfRatings * 10, numberOfItems);
xlabel("Number of Ratings");
ylabel("Number of Items");
title("Item rating histogram \n(amazon-movies-2m)");
write(f, "amazon-movies-2m-item-histo");


13:17:51,291  INFO main DataParser:processDataFile:116 - Data file: data/amazon/ratings70-60
 13:17:51,292  INFO main DataParser:processDataFile:117 - Total Ratings: 1462315
 13:17:51,292  INFO main DataParser:processDataFile:118 - Selected test data: 0 of 1462315 samples
 13:17:51,292  INFO main DataParser:computeSparsity:269 - numOfUsers = 7182
 13:17:51,292  INFO main DataParser:computeSparsity:270 - numOfItems = 15171
 13:17:51,293  INFO main DataParser:computeSparsity:271 - sparsity = 0.0134
 User based histogram
13:17:51,307  INFO main DataParser:calculateDataSetHistogram:297 - Total number of Ratings: 7182
 13:17:51,307  INFO main DataParser:calculateDataSetHistogram:298 - Histogram = {0=4, 1=0, 2=7, 3=23, 4=31, 5=49, 6=1229, 7=848, 8=675, 9=525, 10=3791}
 13:17:51,307  INFO main DataParser:calculateDataSetHistogram:299 - numberOfRatings = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
 13:17:51,308  INFO main DataParser:calculateDataSetHistogram:300 - numberOfUsers = [4, 0, 7, 23, 31, 49, 1229, 848, 675, 525, 3791]
 Item based histogram
13:17:51,326  INFO main DataParser:calculateDataSetHistogram:297 - Total number of Ratings: 15171
 13:17:51,326  INFO main DataParser:calculateDataSetHistogram:298 - Histogram = {0=0, 1=2, 2=0, 3=26, 4=1139, 5=2588, 6=2266, 7=1812, 8=1330, 9=989, 10=5019}
 13:17:51,326  INFO main DataParser:calculateDataSetHistogram:299 - numberOfRatings = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
 13:17:51,329  INFO main DataParser:calculateDataSetHistogram:300 - numberOfUsers = [0, 2, 0, 26, 1139, 2588, 2266, 1812, 1330, 989, 5019]
