 f = figure();
 bar(numberOfRatings * 10, numberOfUsers);
 xlabel("Number of Ratings");
 ylabel("Number of Users");
 title("Amazon 1M Data Set");
 write(f, "amazon-1m-histo");


function write (f, file_name)
  H = 3.2; W = 4;
  h = f;
  set (h,'papertype', '<custom>')
  set (h,'paperunits','inches');
  set (h,'papersize',[H W])
  set (h,'paperposition', [0,0,[W H]])
  set (h,'defaultaxesposition', [0.15, 0.15, 0.75, 0.75])
  set (0,'defaultaxesfontsize', 10)
  out_file_name = strcat (file_name,'.eps');
  print('-depsc',  out_file_name);
endfunction

write (f, "ml-mae-k");

# ========================================================
# test case: UB Prediction
# test case: 50 - 58
# ========================================================
k = 1:3:30;
f= figure();
ubmae = UBMaeKAndYList2D (:,2); #y=4
ublshmae = UBLSHMaeKAndYList2D (:,2); #y=4
plot (k, ubmae, '-dk', k, ublshmae, '-*k');
legend ("UB", "UB-LSH")
xlabel("k")
ylabel("MAE")
write (f, strcat (fileName,'-50-mae-k'));


# ========================================================
# test case: UB k and y 2D
# test case: 51
# ========================================================
k = 1:3:30
y = 1:3:30
# Heatmaps
f= figure();
data = UBMaeKAndYList2D;
contourf(k, y, data);
axis square;
colorbar;
xlabel("y");
ylabel("k");
title("MAE");
write (f, strcat (fileName,'-51-ub-mae-k-y-heat-map'));

#Significance and k
# k = 20
mae =  UBMaeKAndYList2D (7,:)
f = figure();
plot (y, mae);
legend("k=20");
xlabel("y");
ylabel("MAE");
write(f, strcat (fileName,'-51-ub-mae-y'));

mae =  UBMaeKAndYList2D (:,2);
# y = 10
f = figure();
plot (k, mae);
legend("y=5");
xlabel("k");
ylabel("MAE")
write(f, strcat (fileName,'-51-ub-mae-k'));


# ========================================================
# Heat Maps for MAE and Runtime - Hash Functions & k
# Test case: 54,
# ========================================================

n = 30;

x = 1:10;
y = 1:3:n;

f= figure();

# Heatmaps
data = UBLSHkHashFunctionsMae2D;
contourf(x, y, data);
axis square;
colorbar;
xlabel("Hash Functions");
ylabel("k");
title("MAE");
write(f, strcat (fileName,'-54-mae-hash-functions-k-heat-map'));

#Hash Functions and k
mae =  UBLSHkHashFunctionsMae2D (:,4)
f = figure();
plot (k, mae);
legend("y=10, numOfHashFunc=4");
xlabel("k");
ylabel("MAE");
write(f, strcat (fileName,'-54-ublsh-mae-k'));

# Hash Functions and k
# k = 20
mae =  UBLSHkHashFunctionsMae2D (8,:)
f = figure();
plot (x, mae);
legend("y=10, k=20");
xlabel("Hash Functions");
ylabel("MAE");
write(f, strcat (fileName,'-54-ublsh-mae-hash-functions'));


# ========================================================
# Heat Maps for MAE and Runtime - Hash Functions & y
# test case : 55
# ========================================================

n = 30;

x = 1:10;
y = 1:3:n;

f= figure();
# Heatmaps
data = UBLSHyHashFunctionsMae2D;
contourf(x, y, data);
axis square;
colorbar;
xlabel("Hash Functions");
ylabel("y");
title("MAE");
write(f, strcat(fileName,'-55-mae-hash-functions-y-heat-map'));



# ========================================================
# test case: UBLSHHashTables Prediction Performance
# test case: 56
# ========================================================
x = 1:10
# Heatmaps
f= figure();
mae =  UBLSHHashTablesMaeList;
f = figure();
plot (x, mae);
xlabel("Hash Tables");
ylabel("MAE");
write(f, strcat (fileName,'-56-ublsh-mae-hash-tables'));

f= figure();
runtime =  UBLSHHashTablesRuntimeList / 1000;
plot (x, runtime);
xlabel("Hash Tables");
ylabel("Runtime (sec)");
write(f, strcat (fileName,'-56-ublsh-runtime-hash-tables'));


# ========================================================
# test case: UBLSHHashFunctions Prediction Performance
# test case: 57
# ========================================================
x = 1:10
# Heatmaps
f= figure();
mae =  UBLSHHashFunctionsMaeList;
plot (x, mae);
xlabel("Hash Functions");
ylabel("MAE");
write(f, strcat (fileName,'-57-ublsh-mae-hash-functions'));

f= figure();
runtime =  UBLSHHashFunctionsRuntimeList / 1000;
plot (x, runtime);
xlabel("Hash Functions");
ylabel("Runtime (sec)");
write(f, strcat (fileName,'-57-ublsh-runtime-hash-functions'));

f= figure();
ratio = PredictedItemsList/8357 .* 100;
plot (x, ratio);
xlabel("Hash Functions");
ylabel("Predicted Items %");
write(f, strcat (fileName,'-57-ublsh-predicted-hash-functions'));


f= figure();
plot (x, UBLSHCandidateSetList);
xlabel("Hash Functions");
ylabel("Cadidate Set Size");
write(f, strcat (fileName,'-57-ublsh-candidate-hash-functions'));


# ========================================================
# test case: UBLSH 2D
# test case: 59
# ========================================================
dataFileBase = data/100k/ml
k = 20
UBLSHMae2D = [[0.8036935028643516, 0.819511830984006, 0.8433752200730323, 0.8588730558556303, 0.9031202970411095, 0.9111224634343714, 0.9354159770894293, 0.9348123895632384, 0.9735505917017581, 0.9878730962484221]; [0.8011886611673913, 0.8068698262488295, 0.8148674654566186, 0.8343608885024336, 0.8454402354128464, 0.873913128671672, 0.9038425689110491, 0.911907617977119, 0.9373053529000316, 0.9643673470165189]; [0.7989444496538368, 0.8013852252976648, 0.8090482909274271, 0.8151925965887951, 0.8303722884676562, 0.8498547965465407, 0.875268304379701, 0.8996069697707272, 0.9355564978522924, 0.9531427353040088]; [0.7985665201862732, 0.798636126906542, 0.80210310275418, 0.8100498686891479, 0.8229871976491351, 0.8362751170875834, 0.8486147316944442, 0.8851467455892285, 0.9223334314210594, 0.9217396822926457]; [0.7981891493412072, 0.8004163753417887, 0.8004128726643615, 0.8052946333336714, 0.8162946991442125, 0.8311171702681243, 0.8485033488790243, 0.8739408267903478, 0.8997895203866918, 0.9264359364104316]; [0.7983690500781897, 0.7993908054733111, 0.802685806321326, 0.8015064049759069, 0.8143199514500822, 0.8235719534925633, 0.846373912490863, 0.8537501093249418, 0.8923698439930706, 0.9298853221693787]; [0.798406362903246, 0.7988129206284876, 0.8007650040638818, 0.8029815674803196, 0.8095405327280444, 0.8178224230836962, 0.8298101538307053, 0.8516720104840156, 0.8836698578280634, 0.9080589076316631]; [0.7982195347166988, 0.7988164186669292, 0.8000525640745071, 0.8009182105160191, 0.8070329208928487, 0.8121613098687472, 0.8316744164994939, 0.8553750212229261, 0.8753251354589779, 0.8812456691241458]; [0.7982864704537986, 0.7983131875381887, 0.7994769732536985, 0.8019392680432134, 0.8043792094495611, 0.8161304520758971, 0.8274426691174134, 0.8387497584119489, 0.8685187491573215, 0.889589230708372]; [0.7982874369413038, 0.7982846352036631, 0.7987917411173208, 0.8012394664984389, 0.8027596509667837, 0.8096278691387594, 0.8219343668819352, 0.837300084577545, 0.8639771521268275, 0.885111506665193]];
UBLSHRuntime2D = [[9249.666666666666, 4404.333333333333, 2800.6666666666665, 2071.0, 859.3333333333334, 867.3333333333334, 610.0, 523.3333333333334, 379.0, 284.6666666666667]; [11199.0, 7595.333333333333, 5255.333333333333, 2415.3333333333335, 1999.0, 1481.3333333333333, 937.3333333333334, 926.0, 601.0, 406.6666666666667]; [12789.666666666666, 9759.333333333334, 6882.0, 4397.333333333333, 2868.0, 2077.6666666666665, 1335.3333333333333, 1099.3333333333333, 627.0, 534.0]; [13722.666666666666, 11883.666666666666, 7887.666666666667, 6009.666666666667, 3821.0, 2698.6666666666665, 2220.6666666666665, 1196.0, 770.3333333333334, 711.3333333333334]; [13842.0, 11778.333333333334, 9674.333333333334, 6619.666666666667, 3871.0, 2813.3333333333335, 2504.0, 1290.3333333333333, 1147.6666666666667, 718.6666666666666]; [14074.333333333334, 12676.0, 9600.0, 7951.0, 4859.0, 3881.0, 2005.3333333333333, 1853.6666666666667, 1164.3333333333333, 847.3333333333334]; [14158.0, 13062.0, 10832.666666666666, 8591.0, 5660.333333333333, 3772.6666666666665, 2848.6666666666665, 2130.3333333333335, 1387.3333333333333, 1022.0]; [13796.666666666666, 13378.666666666666, 11902.0, 9030.666666666666, 6253.333333333333, 4517.666666666667, 2746.3333333333335, 2106.0, 1657.0, 1416.0]; [13933.0, 13447.666666666666, 12335.333333333334, 10029.0, 6816.333333333333, 4551.0, 3395.0, 2492.6666666666665, 1887.3333333333333, 1289.6666666666667]; [14122.666666666666, 13878.666666666666, 12693.666666666666, 10131.666666666666, 7183.333333333333, 5332.0, 3527.6666666666665, 2497.3333333333335, 1894.6666666666667, 1298.3333333333333]];
UBLSHCandidate_Set_List2D = [[534.2616645710345, 261.4457973808238, 153.85489786544926, 93.55456044260683, 35.986678982409785, 25.55836890242983, 12.366484897662758, 9.84127857730162, 5.190040531279481, 1.9439259537269598]; [741.4894807730434, 461.86771450644454, 283.88852668205664, 136.61057892091722, 82.89739402894968, 49.22836075081057, 25.798155872771673, 18.650933480383, 10.318869599552242, 4.36984851222394]; [855.3332554714116, 596.8327128181348, 381.33995540928134, 235.6611323312985, 134.14622130745906, 80.5467820856169, 45.08911125443865, 24.716037867162125, 12.938069976839268, 7.3499289619682715]; [902.6477699029483, 728.9383914083431, 473.7511134486381, 296.872521364075, 168.8773869291314, 106.94310519138641, 62.079789062312194, 30.9676106252105, 16.633842748147707, 10.849047903622546]; [924.3769571672947, 744.4066113479225, 558.2840454120841, 344.8687647403997, 186.62622637777315, 118.73400993776387, 73.32536750245536, 38.67652235754548, 23.108200990144734, 12.918424464576644]; [931.3053718457926, 820.6049449143193, 588.0918087319601, 439.2114994255698, 237.92108861962956, 153.80224262474903, 74.71567351709415, 52.02544300250994, 23.613005941480143, 11.998996087937888]; [938.2399114880276, 866.0893552063567, 656.9675188807217, 460.9682756367822, 281.0963764464902, 169.7822749486205, 95.47122158424882, 60.43060373527856, 29.52880717172759, 18.15865719024773]; [940.7111676171431, 887.6851533992408, 719.2203060295014, 492.5881548274327, 311.18299248454474, 185.83542907320114, 104.75436154925741, 62.30393484395478, 35.09930129008573, 23.372671708289385]; [941.1041573236668, 897.018727184233, 754.6664629677306, 549.0896420606838, 352.43442253432903, 210.71091635237568, 123.9333208196371, 72.7846840478558, 40.22691038875237, 22.533578068232526]; [941.4665463525231, 916.1644619448793, 771.3018877630763, 558.6212734677847, 359.15695210624284, 228.21208599902312, 133.323283221898, 76.23852964489149, 45.290282265648706, 22.608957126928576]];

x = 1:10;
y = 1:10;

f= figure();

# Heatmaps
data = UBLSHMae2D;
contourf(x, y, data);
axis square;
colorbar;
xlabel("Hash Functions");
ylabel("Hash Tables");
title("MAE");
write(f, strcat(fileName,'-59-mae-ublsh-heat-map'));

f= figure();
data = UBLSHRuntime2D / 1000;
contourf(x, y, data);
axis square;
colorbar;
xlabel("Hash Functions");
ylabel("Hash Tables");
title("Running Time (sec)");
write(f, strcat(fileName,'-59-runtime-ublsh-heat-map'));

f= figure();
data = UBLSHCandidate_Set_List2D;
contourf(x, y, data);
axis square;
colorbar;
xlabel("Hash Functions");
ylabel("Hash Tables");
title("Candidate Set Size");
write(f, strcat(fileName,'-59-candidate-ublsh-heat-map'));


# ========================================================
# test case: UBLSH 2D - Hash Tables vs. k
# test case: 60
# ========================================================
dataFileBase = data/100k/ml
k = 31
y = 10
UBLSHkHashTablesMae2D = [[0.9861089894837646, 0.9800343895593752, 0.9808439155764866, 0.9708505187484082, 0.9738335841950495, 0.971945850867597, 0.9855442280298431, 0.9730319424215184, 0.9711015117591583, 0.9722219678907896]; [0.8712786788718209, 0.8561165278543021, 0.8506976462103291, 0.8506030248855533, 0.8499081698586659, 0.8458703475085151, 0.843993263456026, 0.8461199263382103, 0.8443752123614384, 0.8411788320192993]; [0.8619547454313669, 0.8364112566083611, 0.8280886437035001, 0.8273541828945055, 0.8252611607326195, 0.8238450612798921, 0.8224329515077398, 0.8212178224878895, 0.8191292338869821, 0.8184671636038278]; [0.8594481692947827, 0.8377638512978703, 0.8216312986990929, 0.8184159281060684, 0.8148850190914919, 0.8142055779180787, 0.8114936161408558, 0.8131335242986936, 0.8124336974550204, 0.8103607700212202]; [0.8586398179682355, 0.8298863416459401, 0.8163207174722421, 0.8139911929468262, 0.8120933705277603, 0.8096973029792981, 0.8069329357181209, 0.8081399133506042, 0.8048510701948947, 0.8074214516861183]; [0.8573203969598747, 0.8295525922584299, 0.8201571386949998, 0.816539231888668, 0.8091820727548508, 0.8042452205822883, 0.804547637335122, 0.8049282214375633, 0.8047744160740136, 0.8019457220960832]; [0.855489620974844, 0.8306589674368876, 0.8143425519209018, 0.8126814159131582, 0.8089952880205077, 0.8030949527871712, 0.8016018013762358, 0.8038496996208077, 0.8002073605514832, 0.8016301316518976]; [0.8604795724777016, 0.8275350010249478, 0.8145962742361155, 0.810999161270115, 0.8053398305775655, 0.8043313891890138, 0.8009993286953768, 0.802467875216887, 0.8001738818256438, 0.8004549715606033]; [0.8572818218309739, 0.8285235055737982, 0.8174971883927363, 0.810335589498865, 0.8072361518682429, 0.8050337634808807, 0.8024369098721943, 0.8027591992722315, 0.8016822406668863, 0.8011286390342599]; [0.8520980625597963, 0.8294652931467036, 0.8181603169122728, 0.8112646335030825, 0.8072534815617681, 0.8029574399758541, 0.8018569805986545, 0.8024238436260415, 0.8020824140036918, 0.8000979909057081]];
UBLSHkRuntime2D = [[2006.6666666666667, 3300.3333333333335, 4845.0, 4709.333333333333, 6789.333333333333, 7494.666666666667, 8602.333333333334, 8244.0, 9524.666666666666, 10020.333333333334]; [2436.6666666666665, 3476.6666666666665, 4721.0, 5232.666666666667, 6547.333333333333, 7547.666666666667, 7798.666666666667, 9068.666666666666, 9287.0, 10236.0]; [1986.0, 3293.3333333333335, 4445.0, 6041.333333333333, 6487.333333333333, 7693.333333333333, 8921.0, 8538.0, 9422.666666666666, 10126.333333333334]; [1657.3333333333333, 3033.3333333333335, 4575.333333333333, 5446.666666666667, 6618.666666666667, 7528.666666666667, 7853.666666666667, 8285.666666666666, 9465.666666666666, 9940.333333333334]; [1735.3333333333333, 3788.6666666666665, 3940.0, 5279.333333333333, 6928.666666666667, 7682.666666666667, 8229.666666666666, 8575.666666666666, 9887.0, 9655.0]; [1616.0, 3346.3333333333335, 4522.333333333333, 5273.333333333333, 6475.0, 7704.666666666667, 8976.333333333334, 8872.333333333334, 9621.666666666666, 9940.333333333334]; [2447.3333333333335, 3172.6666666666665, 4895.333333333333, 5473.0, 6281.333333333333, 7805.333333333333, 7953.333333333333, 9024.0, 9520.666666666666, 10662.0]; [1767.6666666666667, 3086.6666666666665, 4980.0, 5551.666666666667, 6532.0, 7985.333333333333, 8783.0, 8391.666666666666, 9253.666666666666, 10351.666666666666]; [1946.6666666666667, 3651.0, 4798.666666666667, 5289.333333333333, 6814.666666666667, 7248.333333333333, 7797.666666666667, 8583.0, 8727.666666666666, 9960.0]; [2400.6666666666665, 3061.6666666666665, 4445.333333333333, 5790.333333333333, 6520.333333333333, 7795.666666666667, 8841.666666666666, 8797.666666666666, 9309.666666666666, 9722.0]];
UBLSHkCandidate_Set_List2D = [[80.44602932416002, 161.75355470179386, 228.4067280788776, 259.83018588940143, 356.2557062519499, 405.26034944284055, 470.1063148619589, 474.3877593067479, 529.158425473082, 567.500640229736]; [103.68233420424093, 160.61368229389203, 234.87492275196976, 284.6820604678087, 347.1392236213782, 406.14253356350173, 439.3059472561112, 505.56509827478794, 532.6873455577896, 585.0490569633706]; [85.6769961849543, 165.10853000374883, 225.93061359523975, 301.30719221218374, 348.48758116078164, 413.5907148147689, 474.01887690378567, 484.4216915689114, 523.6636304286652, 572.6758998606616]; [86.06395597862813, 157.53684074070054, 235.95662480830424, 278.70911589438236, 345.17090259431035, 415.39811407536763, 444.82987543255666, 469.63809546626595, 524.786163348981, 560.8400130827846]; [82.48747976096223, 168.6767076828128, 214.1980017472002, 287.65664316258705, 383.8504164080783, 413.5456839896546, 448.0805974229648, 482.3417343541425, 539.8780486558444, 553.1919164333232]; [75.60126532865861, 156.02598465955896, 222.3746980083977, 281.3612572388593, 340.71203178269906, 423.6616069503045, 474.4175292274883, 498.9748184130096, 550.3256945559142, 569.1235478770421]; [98.43716604833777, 155.01190796829613, 256.8588756785872, 293.9005965723479, 339.43915373789355, 421.2517045616585, 437.4282230042986, 496.93281089647735, 534.4853584745865, 588.0022877910179]; [87.53868196325216, 157.26238781076594, 231.59796303864036, 288.01157624064484, 338.49495563631353, 412.7310168983472, 468.58765062315814, 482.304542795915, 536.7796621396791, 576.9464658818848]; [83.95565035227041, 181.71998705894904, 242.33392795199805, 277.76209826393165, 360.19863898825315, 390.0486897107799, 441.49515286784754, 497.9927666926181, 519.8376388245919, 575.6272877371679]; [100.97975681038452, 163.11127895123698, 232.05906658488337, 299.4074461005302, 349.19412790253347, 405.5327074245045, 480.5651199602405, 490.73774325509726, 517.4598384071369, 539.5813764945245]];

x = 1:10;
y = 1:3:30;

f= figure();

# Heatmaps
data = UBLSHkHashTablesMae2D;
contourf(x, y, data);
axis square;
colorbar;
xlabel("Hash Tables");
ylabel("k");
title("MAE");
write(f, strcat(fileName,'-60-mae-ublsh-tables-k-heat-map'));

No surprise..

# ========================================================
# test case: UBLSH 2D - Hash Tables vs. y
# test case: 61
# ========================================================
UBLSHyHashTablesMae2D = [[0.8545217881045658, 0.8274334793277035, 0.8163863181338313, 0.8112276583523373, 0.8097636088339139, 0.8075505016294978, 0.8079070743548508, 0.8040688344360079, 0.804254280483446, 0.8045956798654922]; [0.8653659795902818, 0.8285562327394157, 0.8154782558666583, 0.8068889960357605, 0.8082799367028694, 0.8030991563033442, 0.8023238128573628, 0.8016294478548858, 0.8027687217219067, 0.8006201877745568]; [0.8601583847389898, 0.8320168537233745, 0.8119623174984473, 0.8099579040687678, 0.8080556469934296, 0.8063179108818571, 0.8032407411467153, 0.8012750705320152, 0.8010855860438832, 0.7999692893686912]; [0.8532924664578555, 0.8329429071245658, 0.8196439492283485, 0.8099672569598124, 0.8068184329191022, 0.8044279409351381, 0.8044386992323916, 0.8022273007210772, 0.8028651877414109, 0.8010156972707009]; [0.8604098199469328, 0.8262085943647914, 0.8120198927624079, 0.8136952910619218, 0.8065809065556152, 0.8073540754403017, 0.8053880861900652, 0.8026573073147555, 0.8031124443910111, 0.8021858460937746]; [0.863278149000224, 0.8310035817327505, 0.8180609829570377, 0.8113004692785376, 0.8108080159107726, 0.8070683714853266, 0.804748245297298, 0.8026143408947287, 0.8029216128609734, 0.8028569215709851]; [0.8554380009084775, 0.8276806069078221, 0.8167528484562437, 0.8092290886251767, 0.8084583195215315, 0.806688234627043, 0.8032638884262707, 0.8039553148321937, 0.8044900793868995, 0.8021634487478028]; [0.8607662604803789, 0.8282620339796036, 0.818396958902501, 0.8145198757193984, 0.8122743414529211, 0.8072261275420018, 0.8048877848483409, 0.8032242631541795, 0.8039631261901734, 0.8026089069687238]; [0.8648290438047312, 0.8348759912468583, 0.8168957686811605, 0.8130184789451801, 0.809908117165835, 0.8074131634482528, 0.8050354913411, 0.805433101716889, 0.8046265674444922, 0.8030434594405976]; [0.8674951059508395, 0.8299359353923744, 0.821060558954684, 0.8177879567583162, 0.8090087707670266, 0.8063088729236756, 0.8063993576943905, 0.8037437464544025, 0.8044695219712187, 0.8027856309961597]];
UBLSHyRuntime2D = [[1690.3333333333333, 3703.3333333333335, 4190.333333333333, 6065.666666666667, 6700.333333333333, 7154.333333333333, 8045.333333333333, 9295.0, 9536.666666666666, 9656.666666666666]; [1547.0, 2773.3333333333335, 4677.0, 6478.333333333333, 6626.333333333333, 7386.0, 8350.0, 8466.333333333334, 9428.666666666666, 10252.333333333334]; [1632.0, 2990.3333333333335, 4653.666666666667, 5417.0, 6269.333333333333, 6991.666666666667, 8576.666666666666, 8886.666666666666, 9983.666666666666, 10107.0]; [2139.6666666666665, 2698.0, 4454.0, 5931.666666666667, 6033.333333333333, 7090.333333333333, 9030.666666666666, 8985.333333333334, 9538.333333333334, 9429.0]; [1745.0, 3496.0, 5149.333333333333, 5056.333333333333, 7365.666666666667, 6629.0, 8351.0, 9472.333333333334, 8996.0, 9863.666666666666]; [1683.6666666666667, 3591.6666666666665, 4776.333333333333, 6099.666666666667, 6251.333333333333, 7052.333333333333, 8379.0, 8600.0, 9475.333333333334, 9657.666666666666]; [2227.3333333333335, 3577.0, 4342.666666666667, 6079.333333333333, 6299.0, 7326.666666666667, 8390.333333333334, 8907.333333333334, 8551.0, 10130.666666666666]; [1993.6666666666667, 4411.0, 5038.333333333333, 5377.666666666667, 5980.333333333333, 7917.0, 8358.666666666666, 8339.0, 9357.666666666666, 9868.333333333334]; [1588.3333333333333, 2774.6666666666665, 5004.333333333333, 5283.0, 7444.666666666667, 7202.666666666667, 7842.0, 8679.333333333334, 9462.0, 10204.333333333334]; [1983.3333333333333, 3550.6666666666665, 4147.666666666667, 4607.666666666667, 6755.666666666667, 7178.333333333333, 9141.333333333334, 8879.666666666666, 10039.0, 10375.0]];
UBLSHyCandidate_Set_List2D = [[78.20643418418283, 162.07140485890272, 216.09735135486528, 300.47732251466726, 346.7754800675634, 392.5739175388882, 447.0929146146532, 508.6874668498519, 520.6720981913417, 562.4525673023396]; [78.52511810305676, 145.91142854478048, 235.7537204902293, 316.0934090128166, 360.2668010400057, 403.61980732224947, 462.82438753216684, 477.89608864224664, 524.0401975162936, 564.7528140038461]; [82.9784699589007, 158.72726654821358, 248.6167614558425, 290.58506940271053, 329.1882316942039, 396.30563166196276, 486.55758731606835, 485.51041865642947, 539.9188832462555, 568.6371508001313]; [95.75316220425607, 142.90347247693342, 232.4220401462725, 296.3095426309181, 351.70902024575827, 402.3586199334878, 483.25725373812617, 493.57016437239207, 544.903814850758, 547.5433005123173]; [86.04093071830145, 164.50304630797817, 246.36863562929662, 285.3264302457988, 379.05740595417154, 370.5702585024422, 454.0224260051646, 520.4124906365372, 523.576386352547, 564.4976460810062]; [72.69177231418534, 178.17105654648435, 226.99697724607438, 308.91948667480364, 335.6498842911206, 397.37737461898877, 466.358796922753, 492.50728424961716, 523.6082705106795, 553.9236969428542]; [92.96872540394715, 161.02881145281395, 230.583690042066, 300.9849266233643, 338.6461149749666, 394.25831353586665, 464.36793392423743, 483.7854299961926, 504.8609925600212, 563.3037701486772]; [89.88471929385145, 181.37264432549162, 253.16574179584453, 277.1347933054881, 328.92089800089315, 423.75342869245907, 451.2630468611269, 494.888406773943, 526.7723841636035, 560.7878204309683]; [77.84443137393772, 127.91904439819363, 232.37661539659166, 279.24586845008866, 401.49428538512285, 407.422174335444, 445.11350735093225, 488.0171477326117, 530.8426238292656, 574.6774848642326]; [88.99761630187716, 169.68542157295323, 225.43850560834161, 261.2997296593578, 347.42623482470657, 388.64253744071203, 461.7678266375204, 494.8654185571298, 545.2938655134034, 582.3068387883096]];

x = 1:10;
y = 1:3:30;

f= figure();

# Heatmaps
data = UBLSHyHashTablesMae2D;
contourf(x, y, data);
axis square;
colorbar;
xlabel("Hash Tables");
ylabel("y");
title("MAE");
write(f, strcat(fileName,'-61-mae-ublsh-tables-y-heat-map'));

f= figure();
data = UBLSHyRuntime2D / 1000;
contourf(x, y, data);
axis square;
colorbar;
xlabel("Hash Tables");
ylabel("y");
title("Running Time (sec)");
write(f, strcat(fileName,'-61-runtime-ublsh-tables-y-heat-map'));

f= figure();
data = UBLSHyCandidate_Set_List2D;
contourf(x, y, data);
axis square;
colorbar;
xlabel("Hash Tables");
ylabel("y");
title("Candidate Set Size");
write(f, strcat(fileName,'-61-candidate-ublsh-tables-y-heat-map'));

No surprise...

# ========================================================
# test case: UBLSH k and y 2D
# test case: 62
# ========================================================

f= figure();
k = 1:3:30;
y = 1:5:50;
data = UBLSHMaeKAndYList2D;
contourf(y, k, data);
axis square;
colorbar;
xlabel("y");
ylabel("k");
title("MAE");
write(f, strcat(fileName,'-62-mae-ublsh-k-y-heat-map'));

#Significance
#k = 20
mae =  UBLSHMaeKAndYList2D (7,:)
f = figure();
plot (y, mae)
xlabel("y");
ylabel("MAE")
legend ("k=20")
write(f, strcat(fileName,'-62-mae-ublsh-y'));

mae =  UBLSHMaeKAndYList2D (:,3)
# y = 10
f = figure();
plot (k, mae)
xlabel("k");
ylabel("MAE")
legend ("y=10")
write(f, strcat(fileName,'-62-mae-ublsh-k'));



f= figure();
k = 1:3:30;
y = 1:3:30;
data = IBLSHMaeKAndYList2D;
contourf(y, k, data);
axis square;
colorbar;
xlabel("y");
ylabel("k");
title("MAE");

# ========================================================
# test case: UB Precision & k
# test case: 70
# ========================================================
dataFileBase = data/100k/ml
UBPrecisionAndKList = [0.008039215686274512, 0.0100046685340803, 0.01471055088702148, 0.016080765639589167, 0.015296451914098971, 0.01568860877684407, 0.01706115779645192, 0.017845471521942113, 0.01804154995331466, 0.018041549953314664]

k = 1:3:30;
mae =  UBPrecisionAndKList;
f = figure();
plot (k, mae)
xlabel("k");
ylabel("Precision")
write(f, strcat(fileName,'-70-precision-ub-k'));


# ========================================================
# test case: UBLSH Precision & k
# test case: 71
# ========================================================
dataFileBase = data/100k/ml
UBLSHPrecisionAndKList = [0.010196078431372553, 0.00804388422035481, 0.004705882352941177, 0.004313725490196078, 0.00392156862745098, 0.0037254901960784314, 0.004313725490196078, 0.00392156862745098, 0.0037254901960784314, 0.004313725490196079]
k = 1:3:30;
mae =  UBLSHPrecisionAndKList;
f = figure();
plot (k, mae)
xlabel("k");
ylabel("Precision")
write(f, strcat(fileName,'-71-precision-ublsh-k'));


# ========================================================
# test case: UBLSH Precision & y
# test case: 74
# ========================================================
dataFileBase = data/100k/ml
UBLSHPrecisionAndYList = [0.005294117647058823, 0.005098039215686274, 0.005098039215686274, 0.005294117647058824, 0.004705882352941177, 0.005294117647058824, 0.00627450980392157, 0.004705882352941175, 0.006470588235294117, 0.005294117647058823]
y = 1:3:30;
mae =  UBLSHPrecisionAndYList;
f = figure();
plot (y, mae)
xlabel("y");
ylabel("Precision")
write(f, strcat(fileName,'-74-precision-ublsh-y'));

# ========================================================
# test case: UBLSH 2D - Precision (y & k) test
# test case: 75
# ========================================================
dataFileBase = data/100k/ml
k = 31
UBLSHYAndKPrecision2D = [[0.008627450980392158, 0.009607843137254905, 0.009607843137254901, 0.009607843137254905, 0.010000000000000002, 0.01039449112978525, 0.009803921568627453, 0.009803921568627453, 0.010000000000000002, 0.009607843137254905]; [0.00784547152194211, 0.008629785247432308, 0.009806255835667603, 0.009019607843137255, 0.010196078431372553, 0.01039449112978525, 0.009806255835667603, 0.009024276377217555, 0.010396825396825399, 0.010002334267040152]; [0.0068650793650793665, 0.007257236227824464, 0.007257236227824464, 0.007058823529411767, 0.008039215686274512, 0.009218020541549956, 0.009218020541549956, 0.009021942110177405, 0.010590569561157797, 0.009414098972922504]; [0.00803921568627451, 0.00804154995331466, 0.008235294117647061, 0.009215686274509804, 0.009610177404295053, 0.011178804855275443, 0.010196078431372551, 0.009607843137254905, 0.010000000000000002, 0.009607843137254905]; [0.009806255835667603, 0.010198412698412701, 0.009215686274509806, 0.009607843137254905, 0.009607843137254905, 0.009607843137254905, 0.00882352941176471, 0.008431372549019609, 0.009803921568627453, 0.009215686274509808]; [0.009806255835667603, 0.01039449112978525, 0.009411764705882356, 0.009803921568627454, 0.0103921568627451, 0.009803921568627453, 0.009019607843137259, 0.009019607843137259, 0.009215686274509806, 0.00862745098039216]; [0.010002334267040152, 0.009414098972922506, 0.009218020541549956, 0.00862745098039216, 0.009607843137254905, 0.009803921568627454, 0.008039215686274512, 0.007058823529411766, 0.008235294117647058, 0.008627450980392158]; [0.00843370681605976, 0.008237628384687211, 0.008627450980392158, 0.00843137254901961, 0.008627450980392158, 0.00882352941176471, 0.0074509803921568645, 0.008039215686274512, 0.007058823529411766, 0.007254901960784314]; [0.008629785247432308, 0.008431372549019609, 0.00882352941176471, 0.00823529411764706, 0.008039215686274512, 0.007843137254901962, 0.006274509803921569, 0.007058823529411767, 0.0068627450980392165, 0.007450980392156865]; [0.007254901960784314, 0.0068627450980392165, 0.007843137254901962, 0.007254901960784314, 0.007647058823529412, 0.006666666666666668, 0.007058823529411767, 0.006862745098039218, 0.007058823529411767, 0.007058823529411766]];
UBLSHYAndKCandidate_Set_List2D = [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]];

k = 1:3:30;
y = 1:3:30;
f= figure();
# Heatmaps
data = UBLSHYAndKPrecision2D;
contourf(y, k, data);
axis square;
colorbar;
xlabel("y");
ylabel("k");
title("Precision");
write(f, strcat(fileName,'-75-precision-ublsh-y-k-map'));


# ========================================================
# test case: UB 2D - Precision (y & k) test
# test case: 76
# ========================================================
dataFileBase = data/100k/ml
k = 31
UBYAndKPrecision2D = [[0.006080765639589171, 0.007647058823529414, 0.008823529411764707, 0.008039215686274512, 0.008235294117647061, 0.009414098972922506, 0.009414098972922504, 0.010786647992530348, 0.008823529411764707, 0.007843137254901962]; [0.006666666666666668, 0.008041549953314662, 0.009610177404295055, 0.0100046685340803, 0.011377217553688146, 0.01254901960784314, 0.014117647058823535, 0.013921568627450987, 0.01529645191409898, 0.014119981325863682]; [0.0107843137254902, 0.011178804855275448, 0.013923902894491134, 0.01471055088702148, 0.015492530345471529, 0.01568860877684408, 0.017058823529411772, 0.015490196078431379, 0.015490196078431379, 0.015100373482726429]; [0.011372549019607847, 0.012355275443510741, 0.014316059757236233, 0.016080765639589167, 0.01451213818860878, 0.015884687208216623, 0.015098039215686282, 0.015294117647058831, 0.015490196078431379, 0.017453314659197014]; [0.011960784313725497, 0.012747432306255841, 0.013335667600373488, 0.015296451914098971, 0.015884687208216623, 0.01745331465919701, 0.015490196078431377, 0.017453314659197014, 0.018629785247432307, 0.018041549953314664]; [0.011568627450980397, 0.012551353874883292, 0.012352941176470594, 0.01568860877684407, 0.01666900093370682, 0.016078431372549027, 0.017453314659197014, 0.018627450980392157, 0.019021942110177405, 0.019021942110177405]; [0.013923902894491136, 0.01490429505135388, 0.014708216619981332, 0.01706115779645192, 0.017453314659197017, 0.01686274509803922, 0.018041549953314664, 0.019019607843137252, 0.020002334267040147, 0.018041549953314664]; [0.014708216619981332, 0.014708216619981332, 0.01529645191409898, 0.017845471521942113, 0.016080765639589174, 0.016865079365079364, 0.01843370681605976, 0.0194140989729225, 0.0194140989729225, 0.018041549953314664]; [0.014119981325863685, 0.015100373482726429, 0.01666900093370682, 0.01804154995331466, 0.017061157796451915, 0.01843370681605976, 0.0196078431372549, 0.01843370681605976, 0.019414098972922504, 0.01823762838468721]; [0.014904295051353877, 0.015100373482726429, 0.01686507936507937, 0.018041549953314664, 0.018237628384687208, 0.018629785247432307, 0.018629785247432307, 0.020198412698412698, 0.019610177404295052, 0.018041549953314657]];
UBYAndKCandidate_Set_List2D = [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]];

k = 1:3:30;
y = 1:3:30;
f= figure();
data = UBYAndKPrecision2D;
contourf(y, k, data);
axis square;
colorbar;
xlabel("y");
ylabel("k");
title("Precision");
write(f, strcat(fileName,'-76-precision-ub-y-k-map'));


# ========================================================
# test case: UBLSH 2D - Precision (y & k) test
# test case: 104
# ========================================================
dataFileBase = data/100k/ml

x = 1:10;
y = 1:10;

f= figure();

# Heatmaps
data = UBLSHPrecision2D;
contourf(x, y, data);
axis square;
colorbar;
xlabel("Hash Functions");
ylabel("Hash Tables");
title("Precision");
write(f, "precision-2D");

f= figure();
data = UBLSHCandidate_Set_List2D;
contourf(x, y, data);
axis square;
colorbar;
xlabel("Hash Functions");
ylabel("Hash Tables");
title("Candidate Set Size");
write(f, 'candidate_set_size');



# ========================================================
# Number of Hash Functions on the metrics
# ========================================================

max_x = n = 10;
x = 1:max_x;

numOfHashTables = 10;

y1 = mean(UBDiversity);
y2 = mean(IBDiversity);
y3 = UBLSHHashFunctionsDiversityList0;
y4 = IBLSHHashFunctionsDiversityList0;
y5 = LSHDiversityList;
f= figure();
plot ([1,n], [y1, y1],'-k', [1,n], [y2, y2],'-.k', x,y3,'-dk', x,y4,'-*k');
legend("UB", "IB", "UB-LSH", "IB-LSH");
xlabel("Number of Hash Functions");
ylabel("Diversity");
write(f, strcat(fileName,'-diversity-hash-functions'));


y1 = mean(UBAggrDiversityList);
y2 = mean(IBAggrDiversityList);
y3 = UBLSHHashFunctionsAggrDiversityList0;
y4 = IBLSHHashFunctionsAggrDiversityList0;
y5 = LSHAggrDiversityList;
f= figure();
plot ([1,n], [y1, y1],'-k', [1,n], [y2, y2], '-.k', x, y3, '-dk',x, y4, '-*k');
legend("UB", "IB", "UB-LSH", "IB-LSH");
xlabel("Number of Hash Functions");
ylabel("Aggregate Diversity");
write(f, strcat(fileName,'-aggr-diversity-hash-functions'));

y1 = mean(UBNolvelty);
y2 = mean(IBNolvelty);
y3 = UBLSHHashFunctionsNoveltyList0;
y4 = IBLSHHashFunctionsNoveltyList0;
y5 = LSHnoveltyList;
f= figure();
plot ([1,n], [y1, y1],'-k', [1,n], [y2, y2], '-.k', x, y3, '-dk',x, y4, '-*k');
legend("UB", "IB", "UB-LSH", "IB-LSH");
xlabel("Number of Hash Functions");
ylabel("Novelty");
write(f, strcat(fileName,'-novelty-hash-functions'));

y1 = mean(UBSerendipity);
y2 = mean(IBSerendipity);
y3 = UBLSHHashFunctionsSerendipityList0;
y4 = IBLSHHashFunctionsSerendipityList0;
f= figure();
plot ([1,n], [y1, y1],'-k', [1,n], [y2, y2], '-.k', x, y3, '-dk',x, y4, '-*k');
legend("UB", "IB", "UB-LSH", "IB-LSH");
xlabel("Number of Hash Functions");
ylabel("Serendipity");
write(f, strcat(fileName,'-serendipity-hash-functions'));

y1 = mean(UBPrecisionList);
y2 = mean(IBPrecisionList);
y3 = UBLSHHashFunctionsPrecisionList0;
y4 = IBLSHHashFunctionsPrecisionList0;
y5 = LSHPrecisionList;
f= figure();
plot ([1,n], [y1, y1],'-k', [1,n], [y2, y2], '-.k', x, y3, '-dk',x, y4, '-*k');
legend("UB", "IB", "UB-LSH", "IB-LSH");
xlabel("Number of Hash Functions");
ylabel("Precision");
write(f, strcat(fileName,'-precision-hash-functions'));

y1 = mean(UBRecallList);
y2 = mean(IBRecallList);
y3 = UBLSHHashFunctionsRecallList0;
y4 = IBLSHHashFunctionsRecallList0;
y5 = LSHRecallList;
f= figure();
plot ([1,n], [y1, y1],'-k', [1,n], [y2, y2], '-.k', x, y3, '-dk',x, y4, '-*k');
legend("UB", "IB", "UB-LSH", "IB-LSH");
xlabel("Number of Hash Functions");
ylabel("Recall")
write(f, strcat(fileName,'-recall-hash-functions'));


y3 = UBLSHHashFunctionsCandidateSetList0;
y4 = IBLSHHashFunctionsCandidateSetList0;
f= figure();
plot (x, y3, '-dk',x, y4, '-*k');
legend("UB-LSH", "IB-LSH");
xlabel("Number of Hash Functions");
ylabel("Candidate Set Size")
write(f, strcat(fileName,'-candidate-set-hash-functions'));


# ========================================================
# Number of Hash Tables on the metrics
# ========================================================

n= 10;

x = 1:1:n;
numOfHashFunctions = 6;

y1 = mean(UBDiversity);
y2 = mean(IBDiversity);
y3 = UBLSHHashTablesDiversityList0;
y4 = IBLSHHashTablesDiversityList0;
f= figure();
plot ([1,n], [y1, y1],'-k', [1,n], [y2, y2], '-.k', x, y3, '-dk',x, y4, '-*k');
legend("UB", "IB", "UB-LSH", "IB-LSH");
xlabel("Number of Hash Tables");
ylabel("Diversity");
write(f, strcat(fileName,'-diversity-hash-tables'));

y1 = mean(UBAggrDiversityList);
y2 = mean(IBAggrDiversityList);
y3 = UBLSHHashTablesAggrDiversityList0;
y4 = IBLSHHashTablesAggrDiversityList0;
f= figure();
plot ([1,n], [y1, y1],'-k', [1,n], [y2, y2], '-.k', x, y3, '-dk',x, y4, '-*k');
legend("UB", "IB", "UB-LSH", "IB-LSH");
xlabel("Number of Hash Tables");
ylabel("Aggregate Diversity");
write(f, strcat(fileName,'-aggr-diversity-hash-tables'));

y1 = mean(UBNolvelty);
y2 = mean(IBNolvelty);
y3 = UBLSHHashTablesNoveltyList0;
y4 = IBLSHHashTablesNoveltyList0;
f= figure();
plot ([1,n], [y1, y1],'-k', [1,n], [y2, y2], '-.k', x, y3, '-dk',x, y4, '-*k');
legend("UB", "IB", "UB-LSH", "IB-LSH");
xlabel("Number of Hash Tables");
ylabel("Novelty");
write(f, strcat(fileName,'-novelty-hash-tables'));

y1 = mean(UBSerendipity);
y2 = mean(IBSerendipity);
y3 = UBLSHHashTablesSerendipityList0;
y4 = IBLSHHashTablesSerendipityList0;
f= figure();
plot ([1,n], [y1, y1],'-k', [1,n], [y2, y2], '-.k', x, y3, '-dk',x, y4, '-*k');
legend("UB", "IB", "UB-LSH", "IB-LSH");
xlabel("Number of Hash Tables");
ylabel("Serendipity");
write(f, strcat(fileName,'-Serendipity-hash-tables'));

y1 = mean(UBPrecisionList);
y2 = mean(IBPrecisionList);
y3 = UBLSHHashTablesPrecisionList0;
y4 = IBLSHHashTablesPrecisionList0;
y5 = LSHPrecisionList;
f= figure();
plot ([1,n], [y1, y1],'-k', [1,n], [y2, y2], '-.k', x, y3, '-dk',x, y4, '-*k');
legend("UB", "IB", "UB-LSH", "IB-LSH");
xlabel("Number of Hash Tables");
ylabel("Precision");
write(f, strcat(fileName,'-precision-hash-tables'));

y1 = mean(UBRecallList);
y2 = mean(IBRecallList);
y3 = UBLSHHashTablesRecallList0;
y4 = IBLSHHashTablesRecallList0;
y5 = LSHRecallList;
f= figure();
plot ([1,n], [y1, y1],'-k', [1,n], [y2, y2], '-.k', x, y3, '-dk',x, y4, '-*k');
legend("UB", "IB", "UB-LSH", "IB-LSH");
xlabel("Number of Hash Tables");
ylabel("Recall")
write(f, strcat(fileName,'-recall-hash-tables'));

y3 = UBLSHHashTablesCandidateSetList0;
y4 = IBLSHHashTablesCandidateSetList0;
f= figure();
plot (x, y3, '-dk',x, y4, '-*k');
legend("UB-LSH", "IB-LSH");
xlabel("Number of Hash Tables");
ylabel("Candidate Set Size")
write(f, strcat(fileName,'-candidate-set-hash-tables'));


