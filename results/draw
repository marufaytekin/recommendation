 f = figure();
 bar(numberOfRatings * 10, numberOfUsers);
 xlabel("Number of Ratings");
 ylabel("Number of Users");
 title("Amazon 1M Data Set");
 write(f, "amazon-1m-histo");


function write (f, file_name)
  H = 3.2; W = 4;
  h = f;
  set (h,'papertype', '<custom>')
  set (h,'paperunits','inches');
  set (h,'papersize',[H W])
  set (h,'paperposition', [0,0,[W H]])
  set (h,'defaultaxesposition', [0.15, 0.15, 0.75, 0.75])
  set (0,'defaultaxesfontsize', 10)
  out_file_name = strcat (file_name,'.png');
  print('-dpng',  out_file_name);
endfunction

write (f, "ml-mae-k");


# Heat Maps
x = 1:10;
y = 1:10;
function draw2DMae (x, y, data, file)
  f= figure();
  contourf(x, y, data);
  axis square;
  colorbar;
  xlabel("Hash Functions");
  ylabel("Hash Tables");
  title("MAE");
  write(f, file);
endfunction


function draw2DRuntime (x, y, data, file)
  f= figure();
  contourf(x, y, data);
  axis square;
  colorbar;
  xlabel("Hash Functions");
  ylabel("Hash Tables");
  title("Running Time (ms)");
  write(f, file);
endfunction

function draw2DCandidateSet (x, y, data, file)
  f= figure();
  contourf(x, y, data);
  axis square;
  colorbar;
  xlabel("Hash Functions");
  ylabel("Hash Tables");
  title("Candidate Set Size");
  write(f, file);
endfunction

# Heatmaps
data = UBKNNLSHMae2D;
file = strcat(fileName, '-UBKNNLSHMae2D')
draw2DMae (x, y, data,file)

data = UBKNNLSHRuntime2D;
file = strcat(fileName, '-UBKNNLSHRuntime2D')
draw2DRuntime (x, y, data, file)

data = UBKNNLSHCandidate_Set_List2D;
file = strcat(fileName, '-UBKNNLSHCandidate_Set_List2D')
draw2DRuntime (x, y, data, file)

# Heatmaps
data = IBKNNLSHMae2D;
file = strcat(fileName, '-IBKNNLSHMae2D')
draw2DMae (x, y, data,file)

data = IBKNNLSHRuntime2D;
file = strcat(fileName, '-IBKNNLSHRuntime2D')
draw2DRuntime (x, y, data, file)

data = IBKNNLSHCandidate_Set_List2D;
file = strcat(fileName, '-IBKNNLSHCandidate_Set_List2D')
draw2DRuntime (x, y, data, file)


# Heatmaps
data = IBLSH1Mae2D;
file = strcat(fileName, '-IBLSH1Mae2D')
draw2DMae (x, y, data,file)

data = IBLSH1Runtime2D;
file = strcat(fileName, '-IBLSH1Runtime2D')
draw2DRuntime (x, y, data, file)

data = IBLSH1Candidate_Set_List2D;
file = strcat(fileName, '-IBLSH1Candidate_Set_List2D')
draw2DRuntime (x, y, data, file)


# Heatmaps
data = UBLSH1Mae2D;
file = strcat(fileName, '-UBLSH1Mae2D')
draw2DMae (x, y, data,file)

data = UBLSH1Runtime2D;
file = strcat(fileName, '-UBLSH1Runtime2D')
draw2DRuntime (x, y, data, file)

data = UBLSH1Candidate_Set_List2D;
file = strcat(fileName, '-UBLSH1Candidate_Set_List2D')
draw2DRuntime (x, y, data, file)


# Heatmaps
data = IBLSH2Mae2D;
file = strcat(fileName, '-IBLSH2Mae2D')
draw2DMae (x, y, data,file)

data = IBLSH2Runtime2D;
file = strcat(fileName, '-IBLSH2Runtime2D')
draw2DRuntime (x, y, data, file)

data = IBLSH2Candidate_Set_List2D;
file = strcat(fileName, '-IBLSH2Candidate_Set_List2D')
draw2DRuntime (x, y, data, file)


# Heatmaps
data = UBLSH2Mae2D;
file = strcat(fileName, '-UBLSH2Mae2D')
draw2DMae (x, y, data,file)

data = UBLSH2Runtime2D;
file = strcat(fileName, '-UBLSH2Runtime2D')
draw2DRuntime (x, y, data, file)

data = UBLSH2Candidate_Set_List2D;
file = strcat(fileName, '-UBLSH2Candidate_Set_List2D')
draw2DRuntime (x, y, data, file)



# ========================================================
# Model build time
# Test case: 8
# ========================================================

# Running time

x = UBnumOfUsersList/1000;
x2 = IBnumOfItemsList/1000;
y1 = UBmodelBuildTimeList/1000;
y2 = IBmodelBuildTimeList/1000;
y3 = UBLSHmodelBuildTimeList/1000;
y4 = IBLSHmodelBuildTimeList/1000;

f= figure();
plot (x, y1, '-dk', x, y3, '--*k');
legend("UB","UB-LSH", "location", "northwest");
xlabel("users(x1000)")
ylabel("Model Build Time (sec)");
write(f, strcat(fileName,'-model-build-time-ub'));

f= figure();
plot (x2, y2, '-dk', x2, y4, '--*k' );
legend("IB", "IB-LSH", "location", "northwest");
xlabel("items(x1000)")
ylabel("Model Build Time(sec)");
write(f, strcat(fileName,'-model-build-time-ib'));


# ========================================================
# k and MAE/runtime
# Test case: 5/6/7/07
# ========================================================

y1=UBMaeList;
y2=IBMaeList;
y3=UBLSHMaeList;
y4=IBLSHMaeList;
x= 1:3:30;

f= figure();
plot (x,y1,'-dk', x,y2, '--*k');
legend("UB", "IB");
legend boxon
xlabel("k")
ylabel("MAE")
write(f, strcat(fileName,'-mae-k'));


f= figure();
n=30;
y1 = numOfUsers/1000;
y2 = numOfItems/1000;
y3=UBLSHCandidateSetList/1000;
y4=IBLSHCandidateSetList/1000;

plot([1,n], [y1, y1], '-.k', [1,n], [y2, y2],'--k', x, y3, '-dk',x, y4, '-*k');
legend("numOfUsers", "numOfItems", "UB-LSH", "IB-LSH", "location", "west");
xlabel("k")
ylabel("Avg. Candidate Set Size (K)")
write(f, strcat(fileName,'-candidate-set-k'));

# ========================================================
# y and MAE
# Test case: 500/520
# ========================================================

y1=UBMaeList;
y2=IBMaeList;
x= 1:3:30;

f= figure();
plot (x,y1,'-dk', x, y2, '-*k')
legend("UB", "IB")
xlabel("Significance(Y)")
ylabel("MAE")
write(f, strcat(fileName,'-mae-y'));


# ========================================================
# Hash Tables against to MAE and Runtime
# test case: 5000
# ========================================================
x = 1:10;
n = 10;

f= figure();
y1 = UBMaeList;
y2 = IBMaeList;
y3 = UBLSHHashTablesMaeList(1:10);
y4 = IBLSHHashTablesMaeList(1:10);
y5 = LSHHashTablesMaeList(1:10);
plot ([1,n], [y1, y1], '-.k', [1,n], [y2, y2],'--k', x, y3 , '-dk', x, y4, '-*k', x, y5, '-ok');
xlabel("Number of Hash Tables");
ylabel("MAE");
legend("UB", "IB","UB-LSH", "IB-LSH", "LSH", "location", "northeast");
legend boxon;
write(f, strcat(fileName,'-hash-tables-mae'));

f= figure();
y1 = UBRuntime/1000;
y2 = IBRuntime/1000;
y3 = UBLSHHashTablesRuntimeList(1:10)/1000;
y4 = IBLSHHashTablesRuntimeList(1:10)/1000;
y5 = LSHHashTablesRuntimeList(1:10)/1000;
plot([1,n], [y1, y1], '-.k', [1,n], [y2, y2],'--k', x, y3, '-dk', x, y4, '-*k', x, y5, '-ok');
xlabel("Number of Hash Tables");
ylabel("Running Time (sec)");
legend("UB", "IB","UB-LSH", "IB-LSH", "LSH", "location", "northwest");
legend boxon;
write(f, strcat(fileName,'-hash-tables-runtime'));

f= figure();
y1 = numOfUsers/1000;
y2 = numOfItems/1000;
y3 = UBLSHHashTablesCandidateSetList(1:10)/1000;
y4 = IBLSHHashTablesCandidateSetList(1:10)/1000;
y5 = LSHHashTablesLSHCandidateSetList(1:10)/1000;
plot(x, y3, '-dk',x, y4, '-*k', x, y5, '-ok');
xlabel("Number of Hash Tables");
ylabel("Candidate set size (K)");
legend("UB-LSH", "IB-LSH", "LSH", "location", "northwest");
legend boxon;
write(f, strcat(fileName,'-hash-tables-candidate-set'));


# ========================================================
# Hash Functions against to MAE and Runtime
# test case: 5000
# ========================================================

x = 1:20;
n = 20;

f = figure();
y1 = UBMaeList;
y2 = IBMaeList;
y3 = UBLSHHashFunctionsMaeList;
y4 = IBLSHHashFunctionsMaeList;
y5 = LSHHashFunctionsMaeList;
plot([1,n], [y1, y1], '-.k', [1,n], [y2, y2],'--k', x, y3, '-dk',x, y4, '-*k', x,y5,'-ok');
xlabel("Number of Hash Functions");
ylabel("MAE");
legend("UB", "IB", "UB-LSH", "IB-LSH", "LSH", "location", "northwest");
legend boxon;
write(f, strcat(fileName,'-hash-functions-mae'));

f= figure();
y1 = UBRuntime/1000;
y2 = IBRuntime/1000;
y3 = UBLSHHashFunctionsRuntimeList/1000;
y4 = IBLSHHashFunctionsRuntimeList/1000;
y5 = LSHHashFunctionsRuntimeList/1000;
plot([1,n], [y1, y1], '-.k', [1,n], [y2, y2],'--k', x, y3, '-dk',x, y4, '-*k', x,y5,'-ok');
xlabel("Number of Hash Functions");
ylabel("Running Time (sec)");
legend("UB", "IB", "UB-LSH", "IB-LSH", "LSH", "location", "northeast");
legend boxon;
write(f, strcat(fileName,'-hash-functions-runtime'));

f = figure();
y3 = UBLSHHashFunctionsCandidateSetList;
y4 = IBLSHHashFunctionsCandidateSetList;
y5 = LSHHashFunctionsCandidateSetList;
plot( x, y3, '-dk',x, y4, '-*k', x,y5,'-ok');
legend("UB-LSH", "IB-LSH", "LSH", "location", "northeast");
legend boxon;
xlabel("Number of Hash Functions");
ylabel("Avg. Candidate Set Size");
write(f, strcat(fileName,'-hash-functions-candidate-set'));

f = figure();
x = 1:10;
total_test_data = 9939;
y2 = UBLSHHashFunctionsPredictedItemsList(1:10)/total_test_data;
y3 = IBLSHHashFunctionsPredictedItemsList(1:10)/total_test_data;
y5 = LSHHashFunctionsPredictedItemsList(1:10)/total_test_data;
plot(x, y2, '-dk', x, y3, '-*k', x,y5,'-ok');
legend("UB-LSH", "IB-LSH", "LSH", "location", "northeast");
legend boxon;
xlabel("Number of Hash Functions");
ylabel("Prediction Ratio");
write(f, strcat(fileName,'-hash-functions-prediction-ratio'));


# =================================================
# Throughput
# =================================================
f = figure();
y2 = 1000 * UBLSHHashFunctionsPredictedItemsList ./ UBLSHHashFunctionsRuntimeList;
y3 = 1000 * IBLSHHashFunctionsPredictedItemsList ./ IBLSHHashFunctionsRuntimeList;
y5 = 1000 * LSHHashFunctionsPredictedItemsList ./ LSHHashFunctionsRuntimeList;
x = 1:10;
plot(x, y2(1:10), '-dk', x, y3(1:10), '-*k', x,y5(1:10),'-ok');
legend("UB-LSH", "IB-LSH", "LSH", "location", "northwest");
legend boxon;
xlabel("Number of Hash Functions");
ylabel("Throughput (predictions/sec.)");
write(f, strcat(fileName,'-hash-functions-throughput'));


f = figure();
y2 = 1000 * UBLSHHashTablesPredictedItemsList ./ UBLSHHashTablesRuntimeList;
y3 = 1000 * IBLSHHashTablesPredictedItemsList ./ IBLSHHashTablesRuntimeList;
y5 = 1000 * LSHHashTablesPredictedItemsList ./ LSHHashTablesRuntimeList;
plot(x, y2(1:10), '-dk', x, y3(1:10), '-*k', x,y5(1:10),'-ok');
legend("UB-LSH", "IB-LSH", "LSH", "location", "west");
legend boxon;
xlabel("Number of Hash Tables");
ylabel("Throughput (predictions/sec.)");
write(f, strcat(fileName,'-hash-tables-throughput'));

# ========================================================
# Number of Hash Functions on the metrics
# ========================================================

max_x = n = 10;
x = 1:max_x;

numOfHashTables = 10;

y1 = mean(UBDiversity);
y2 = mean(IBDiversity);
y3 = UBLSHHashFunctionsDiversityList0;
y4 = IBLSHHashFunctionsDiversityList0;
y5 = LSHHashFunctionsDiversityList(1:10);
f= figure();
plot ([1,n], [y1, y1],'-.k', [1,n], [y2, y2],'--k', x,y3,'-dk', x,y4,'-*k', x,y5,'-ok');
legend("UB", "IB", "UB-LSH", "IB-LSH", "LSH", "location", "southwest");
legend boxon;
xlabel("Number of Hash Functions");
ylabel("Diversity");
write(f, strcat(fileName,'-hash-functions-diversity'));

y1 = mean(UBAggrDiversityList);
y2 = mean(IBAggrDiversityList);
y3 = UBLSHHashFunctionsAggrDiversityList0;
y4 = IBLSHHashFunctionsAggrDiversityList0;
y5 = LSHHashFunctionsAggrDiversityList(1:10);
f= figure();
plot ([1,n], [y1, y1],'-.k', [1,n], [y2, y2],'--k', x,y3,'-dk', x,y4,'-*k', x,y5,'-ok');
legend("UB", "IB", "UB-LSH", "IB-LSH", "LSH", "location", "northwest");
legend boxon;
xlabel("Number of Hash Functions");
ylabel("Aggregate Diversity");
write(f, strcat(fileName,'-hash-functions-aggr-diversity'));

y1 = mean(UBNolvelty);
y2 = mean(IBNolvelty);
y3 = UBLSHHashFunctionsNoveltyList0;
y4 = IBLSHHashFunctionsNoveltyList0;
y5 = LSHHashFunctionsNoveltyList(1:10);
f= figure();
plot ([1,n], [y1, y1],'-.k', [1,n], [y2, y2],'--k', x,y3,'-dk', x,y4,'-*k', x,y5,'-ok');
legend("UB", "IB", "UB-LSH", "IB-LSH", "LSH", "location", "northwest");
legend boxon;
xlabel("Number of Hash Functions");
ylabel("Novelty");
write(f, strcat(fileName,'-hash-functions-novelty'));

y1 = mean(UBSerendipity);
y2 = mean(IBSerendipity);
y3 = UBLSHHashFunctionsSerendipityList0;
y4 = IBLSHHashFunctionsSerendipityList0;
y5 = LSHHashFunctionsSerendipityList(1:10);
f= figure();
plot ([1,n], [y1, y1],'-.k', [1,n], [y2, y2],'--k', x,y3,'-dk', x,y4,'-*k', x,y5,'-ok');
legend("UB", "IB", "UB-LSH", "IB-LSH", "LSH", "location", "west");
legend boxon;
xlabel("Number of Hash Functions");
ylabel("Serendipity");
write(f, strcat(fileName,'-hash-functions-serendipity'));

y1 = mean(UBPrecisionList);
y2 = mean(IBPrecisionList);
y3 = UBLSHHashFunctionsPrecisionList0;
y4 = IBLSHHashFunctionsPrecisionList0;
y5 = LSHHashFunctionsPrecisionList(1:10);
f= figure();
plot ([1,n], [y1, y1],'-.k', [1,n], [y2, y2],'--k', x,y3,'-dk', x,y4,'-*k', x,y5,'-ok');
legend("UB", "IB", "UB-LSH", "IB-LSH", "LSH", "location", "northeast");
legend boxon;
xlabel("Number of Hash Functions");
ylabel("Precision");
write(f, strcat(fileName,'-hash-functions-precision'));

y1 = mean(UBRecallList);
y2 = mean(IBRecallList);
y3 = UBLSHHashFunctionsRecallList0;
y4 = IBLSHHashFunctionsRecallList0;
y5 = LSHHashFunctionsRecallList(1:10);

f= figure();
plot ([1,n], [y1, y1],'-.k', [1,n], [y2, y2],'--k', x,y3,'-dk', x,y4,'-*k', x,y5,'-ok');
legend("UB", "IB", "UB-LSH", "IB-LSH", "LSH", "location", "northeast");
legend boxon;
xlabel("Number of Hash Functions");
ylabel("Recall")
write(f, strcat(fileName,'-hash-functions-recall'));

y1 = numOfUsers/1000;
y2 = numOfItems/1000;
y3 = UBLSHHashFunctionsCandidateSetList0/1000;
y4 = IBLSHHashFunctionsCandidateSetList0/1000;
f= figure();
plot(x, y3, '-dk',x, y4, '-*k');
plot ([1,n], [y1, y1],'-.k', [1,n], [y2, y2],'--k', x,y3,'-dk', x,y4,'-*k');
legend("numofUsers", "numOfItems","UB-LSH", "IB-LSH");
legend boxon;
xlabel("Number of Hash Functions");
ylabel("Avg. Candidate Set Size (K)")
write(f, strcat(fileName,'-hash-functions-evaluation-candidate-set'));



# ========================================================
# Number of Hash Tables on the metrics
# ========================================================
n= 10;
x = 1:1:n;
numOfHashFunctions = 6;

y1 = mean(UBDiversity);
y2 = mean(IBDiversity);
y3 = UBLSHHashTablesDiversityList0;
y4 = IBLSHHashTablesDiversityList0;
y5 = LSHHashTablesDiversityList(1:10);
f= figure();
plot ([1,n], [y1, y1],'-.k', [1,n], [y2, y2],'--k', x,y3,'-dk', x,y4,'-*k', x,y5,'-ok');
legend("UB", "IB", "UB-LSH", "IB-LSH", "LSH", "location", "southeast");
legend boxon;
xlabel("Number of Hash Tables");
ylabel("Diversity");
write(f, strcat(fileName,'-hash-tables-diversity'));

y1 = mean(UBAggrDiversityList);
y2 = mean(IBAggrDiversityList);
y3 = UBLSHHashTablesAggrDiversityList0;
y4 = IBLSHHashTablesAggrDiversityList0;
y5 = LSHHashTablesAggrDiversityList(1:10);
f= figure();
plot ([1,n], [y1, y1],'-.k', [1,n], [y2, y2],'--k', x,y3,'-dk', x,y4,'-*k', x,y5,'-ok');
legend("UB", "IB", "UB-LSH", "IB-LSH", "LSH",  "location", "west");
legend boxon;
xlabel("Number of Hash Tables");
ylabel("Aggregate Diversity");
write(f, strcat(fileName,'-hash-tables-aggr-diversity'));

y1 = mean(UBNolvelty);
y2 = mean(IBNolvelty);
y3 = UBLSHHashTablesNoveltyList0;
y4 = IBLSHHashTablesNoveltyList0;
y5 = LSHHashTablesNoveltyList(1:10);
f= figure();
plot ([1,n], [y1, y1],'-.k', [1,n], [y2, y2],'--k', x,y3,'-dk', x,y4,'-*k', x,y5,'-ok');
legend("UB", "IB", "UB-LSH", "IB-LSH", "LSH", "location", "east");
legend boxon;
xlabel("Number of Hash Tables");
ylabel("Novelty");
write(f, strcat(fileName,'-hash-tables-novelty'));

y1 = mean(UBSerendipity);
y2 = mean(IBSerendipity);
y3 = UBLSHHashTablesSerendipityList0;
y4 = IBLSHHashTablesSerendipityList0;
f= figure();
plot ([1,n], [y1, y1],'-.k', [1,n], [y2, y2],'--k', x,y3,'-dk', x,y4,'-*k', x,y5,'-ok');
legend("UB", "IB", "UB-LSH", "IB-LSH", "LSH", "location", "east");
legend boxon;
xlabel("Number of Hash Tables");
ylabel("Serendipity");
write(f, strcat(fileName,'-hash-tables-serendipity'));

y1 = mean(UBPrecisionList);
y2 = mean(IBPrecisionList);
y3 = UBLSHHashTablesPrecisionList0;
y4 = IBLSHHashTablesPrecisionList0;
y5 = LSHHashTablesPrecisionList(1:10);
f= figure();
plot ([1,n], [y1, y1],'-.k', [1,n], [y2, y2],'--k', x,y3,'-dk', x,y4,'-*k', x,y5,'-ok');
legend("UB", "IB", "UB-LSH", "IB-LSH", "LSH", "location", "northwest");
legend boxon;
xlabel("Number of Hash Tables");
ylabel("Precision");
write(f, strcat(fileName,'-hash-tables-precision'));

y1 = mean(UBRecallList);
y2 = mean(IBRecallList);
y3 = UBLSHHashTablesRecallList0;
y4 = IBLSHHashTablesRecallList0;
y5 = LSHHashTablesRecallList(1:10);
f= figure();
plot ([1,n], [y1, y1],'-.k', [1,n], [y2, y2],'--k', x,y3,'-dk', x,y4,'-*k', x,y5,'-ok');
legend("UB", "IB", "UB-LSH", "IB-LSH", "LSH", "location", "northeast");
legend boxon;
xlabel("Number of Hash Tables");
ylabel("Recall")
write(f, strcat(fileName,'-hash-tables-recall'));


f= figure();
y1 = numOfUsers/1000;
y2 = numOfItems/1000;
y3 = UBLSHHashTablesCandidateSetList0/1000;
y4 = IBLSHHashTablesCandidateSetList0/1000;
plot ([1,n], [y1, y1],'-.k', [1,n], [y2, y2],'--k', x,y3,'-dk', x,y4,'-*k');
legend("numofUsers", "numOfItems","UB-LSH", "IB-LSH", "location", "northwest");
legend boxon;
xlabel("Number of Hash Tables");
ylabel("Avg. Candidate Set Size (K)");
write(f, strcat(fileName,'-hash-tables-evaluation-candidate-set'));



# ===========================================
# Histograms
# ===========================================

f = figure();
bar(numberOfRatings * 10, numberOfUsers);
xlabel("Number of Ratings");
ylabel("Number of Users");
title("Amazon 1M Data Set");
write(f, "amazon-1m-histo");


Data file: data/amazon/amazon-books-1m.data
Total Ratings: 985283
numOfUsers = 7124
numOfItems = 14583
sparsity = 0.0095

User based:
UserHistogram = {0=244, 1=315, 2=322, 3=388, 4=363, 5=418, 6=432, 7=482, 8=446, 9=412, 10=3302}
numberOfRatings = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
numberOfUsers = [244, 315, 322, 388, 363, 418, 432, 482, 446, 412, 3302]
f = figure();
bar(numberOfRatings * 10, numberOfUsers);
xlabel("Number of Ratings");
ylabel("Number of Users");
title("User rating histogram \n(amazon-books)");
write(f, "amazon-books-user-histo");

Item based:
ItemHistogram = {0=1459, 1=1614, 2=2030, 3=1956, 4=1559, 5=1096, 6=811, 7=641, 8=442, 9=424, 10=2551}
numberOfRatings = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
numberOfItems = [1459, 1614, 2030, 1956, 1559, 1096, 811, 641, 442, 424, 2551]
f = figure();
bar(numberOfRatings * 10, numberOfItems);
xlabel("Number of Ratings");
ylabel("Number of Items");
title("Item rating histogram \n(amazon-books)");
write(f, "amazon-books-item-histo");


Data file: data/amazon/amazon-movies-1m.data
Total Ratings: 1193537
numOfUsers = 6929
numOfItems = 12838
sparsity = 0.0134

User based:
UserHistogram = {0=94, 1=166, 2=242, 3=330, 4=421, 5=474, 6=501, 7=504, 8=468, 9=411, 10=3318}
numberOfRatings = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
numberOfUsers = [94, 166, 242, 330, 421, 474, 501, 504, 468, 411, 3318]
f = figure();
bar(numberOfRatings * 10, numberOfUsers);
xlabel("Number of Ratings");
ylabel("Number of Users");
title("User rating histogram \n(amazon-movies)");
write(f, "amazon-movies-user-histo");

Item based:
ItemHistogram = {0=258, 1=393, 2=375, 3=691, 4=821, 5=992, 6=1201, 7=1443, 8=1035, 9=926, 10=4703}
numberOfRatings = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
numberOfItems = [258, 393, 375, 691, 821, 992, 1201, 1443, 1035, 926, 4703]
f = figure();
bar(numberOfRatings * 10, numberOfItems);
xlabel("Number of Ratings");
ylabel("Number of Items");
title("Item rating histogram \n(amazon-movies)");
write(f, "amazon-movies-item-histo");

# ===========================================
# Bucket Dist
# ===========================================

numberOfBuckets = 20 * [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
numberOfItems = [0, 1, 7, 13, 19, 11, 9, 3, 1, 0, 0]
maxSize: 168
numOfUsers = 6040
numOfItems = 3696
f = figure();
bar(numberOfBuckets, numberOfItems);
xlabel("Number of Items");
ylabel("Number of Buckets");
title("Bucket Item Distribution  \n(Ymusic!)");
write(f, "ymusic-bucket-dist");


User based histogram
Histogram = {0=14, 1=86, 2=144, 3=264, 4=420, 5=571, 6=634, 7=682, 8=615, 9=436, 10=3340}
numberOfRatings = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
numberOfUsers = [14, 86, 144, 264, 420, 571, 634, 682, 615, 436, 3340]
f = figure();
bar(numberOfRatings * 10, numberOfUsers);
xlabel("Number of Ratings");
ylabel("Number of Users");
title("User rating histogram \n(amazon-movies-NEW)");
write(f, "amazon-movies-new-user-histo");

Item based histogram
Histogram = {0=2, 1=0, 2=0, 3=0, 4=32, 5=649, 6=2031, 7=1781, 8=1534, 9=914, 10=4923}
numberOfRatings = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
numberOfItems = [2, 0, 0, 0, 32, 649, 2031, 1781, 1534, 914, 4923]
f = figure();
bar(numberOfRatings * 10, numberOfItems);
xlabel("Number of Ratings");
ylabel("Number of Items");
title("Item rating histogram \n(amazon-movies-NEW)");
write(f, "amazon-movies-new-item-histo");

User based histogram
Histogram = {0=24, 1=72, 2=183, 3=594, 4=1533, 5=2596, 6=1661, 7=1200, 8=957, 9=723, 10=5445}
numberOfRatings = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
numberOfUsers = [24, 72, 183, 594, 1533, 2596, 1661, 1200, 957, 723, 5445]

f = figure();
bar(numberOfRatings * 10, numberOfUsers);
xlabel("Number of Ratings");
ylabel("Number of Users");
title("User rating histogram \n(amazon-movies-2m)");
write(f, "amazon-movies-2m-user-histo");

Item based histogram
Histogram = {0=0, 1=142, 2=8236, 3=5878, 4=4267, 5=3161, 6=2273, 7=1941, 8=1623, 9=1570, 10=6750}
numberOfRatings = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
numberOfItems = [0, 142, 8236, 5878, 4267, 3161, 2273, 1941, 1623, 1570, 6750]
f = figure();
bar(numberOfRatings * 10, numberOfItems);
xlabel("Number of Ratings");
ylabel("Number of Items");
title("Item rating histogram \n(amazon-movies-2m)");
write(f, "amazon-movies-2m-item-histo");
